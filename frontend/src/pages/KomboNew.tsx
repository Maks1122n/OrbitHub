import React, { useState, useEffect, useRef } from 'react';
import { Card } from '@/components/ui/Card';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Label } from '@/components/ui/label';
import { 
  Upload, 
  Folder, 
  Check, 
  AlertTriangle, 
  Play, 
  Square, 
  RotateCw,
  Settings,
  Activity,
  Monitor,
  Target,
  BarChart3,
  Download,
  Trash2,
  Pause,
  Zap,
  Bot,
  Eye,
  Shield,
  Globe,
  Cpu,
  Palette,
  Users
} from 'lucide-react';
import { api } from '@/lib/api';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
interface MediaFile {
  originalName: string;
  fileName: string;
  filePath: string;
  size: number;
  uploadedAt: string;
}

interface InstagramAccount {
  login: string;
  password: string;
  profileName: string;
  maxPostsPerDay: number;
  dropboxFolder: string;
}

interface AutomationSettings {
  postsPerDay: number;
  timeBetweenPosts: number;
  autoRestart: boolean;
  useProxy: boolean;
}

interface PupiterStatus {
  isRunning: boolean;
  isPaused: boolean;
  currentTask: string;
  progress: number;
  totalProfiles: number;
  activeProfiles: number;
  errors: string[];
  logs: string[];
}

export default function KomboNew() {
  // States
  const [mediaFiles, setMediaFiles] = useState<MediaFile[]>([]);
  const [instagramAccount, setInstagramAccount] = useState<InstagramAccount>({
    login: '',
    password: '',
    profileName: '',
    maxPostsPerDay: 3,
    dropboxFolder: '/'
  });
  const [settings, setSettings] = useState<AutomationSettings>({
    postsPerDay: 3,
    timeBetweenPosts: 4,
    autoRestart: true,
    useProxy: false
  });
  const [pupiterStatus, setPupiterStatus] = useState<PupiterStatus>({
    isRunning: false,
    isPaused: false,
    currentTask: '–û–∂–∏–¥–∞–Ω–∏–µ',
    progress: 0,
    totalProfiles: 0,
    activeProfiles: 0,
    errors: [],
    logs: []
  });

  const [dropboxConnected, setDropboxConnected] = useState(false);
  const [contentReady, setContentReady] = useState(false);
  const [accountSaved, setAccountSaved] = useState(false);
  const [userAccounts, setUserAccounts] = useState<any[]>([]);

  const fileInputRef = useRef<HTMLInputElement>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadPupiterStatus();
    loadUserAccounts();
    const interval = setInterval(loadPupiterStatus, 2000);
    return () => clearInterval(interval);
  }, []);

  const loadPupiterStatus = async () => {
    try {
      const response = await api.get('/kombo-new/pupiter/status');
      setPupiterStatus(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ Pupiter:', error);
    }
  };

  const loadUserAccounts = async () => {
    try {
      const response = await api.get('/kombo-new/accounts');
      setUserAccounts(response.data.accounts || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', error);
    }
  };

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Dropbox
  const handleDropboxConnect = async () => {
    try {
      const response = await api.post('/kombo-new/dropbox/connect');
      setDropboxConnected(true);
      setContentReady(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Dropbox:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (!files) return;

    const formData = new FormData();
    Array.from(files).forEach(file => {
      formData.append('files', file);
    });

    try {
      const response = await api.post('/kombo-new/media/upload', formData, {
        headers: { 'Content-Type': 'multipart/form-data' }
      });
      setMediaFiles(response.data.files);
      setContentReady(true);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö Instagram + –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—è
  const handleSaveInstagram = async () => {
    try {
      const response = await api.post('/kombo-new/instagram/save', instagramAccount);
      console.log('Instagram account saved:', response.data);
      setAccountSaved(true);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è AdsPower –ø—Ä–æ—Ñ–∏–ª—è
      const { adsPowerResult } = response.data;
      if (adsPowerResult) {
        if (adsPowerResult.created) {
          console.log('‚úÖ AdsPower –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω:', adsPowerResult.profileId);
          // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        } else if (adsPowerResult.error) {
          console.warn('‚ö†Ô∏è AdsPower –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω:', adsPowerResult.error);
          // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é
        }
      }
      
      loadUserAccounts(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Instagram:', error);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—è
  const handleCreateAdsPowerProfile = async () => {
    try {
      const response = await api.post('/kombo-new/adspower/create-auto', {
        instagramData: instagramAccount,
        settings: settings
      });
      console.log('–ü—Ä–æ—Ñ–∏–ª—å AdsPower —Å–æ–∑–¥–∞–Ω:', response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AdsPower –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
  };

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const handleStartAutomation = async () => {
    try {
      await api.post('/kombo-new/pupiter/start', {
        instagramData: instagramAccount,
        mediaFiles: mediaFiles,
        settings: settings
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
    }
  };

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const handleStopAutomation = async () => {
    try {
      await api.post('/kombo-new/pupiter/stop');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
    }
  };

  // –ü–∞—É–∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const handlePauseAutomation = async () => {
    try {
      await api.post('/kombo-new/pupiter/pause');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—É–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
    }
  };

  // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const handleResumeAutomation = async () => {
    try {
      await api.post('/kombo-new/pupiter/resume');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
    }
  };

  // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const handleRestartAutomation = async () => {
    try {
      await api.post('/kombo-new/pupiter/restart');
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
    }
  };

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  const handleDiagnostics = async () => {
    try {
      const response = await api.get('/kombo-new/pupiter/diagnostics');
      console.log('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:', response.data);
      // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
    }
  };

  return (
    <div className="space-y-6 p-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="text-center mb-8">
        <h1 className="text-4xl font-bold text-white mb-2">
          üéÆ KOMBO-NEW - –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è Instagram
        </h1>
        <p className="text-gray-400">
          Pupiter –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ AdsPower –∏ –ø—É–±–ª–∏–∫—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç
        </p>
      </div>

      {/* Pupiter Dashboard */}
      <Card className="mb-6">
        <div className="p-6 border-b border-gray-700">
          <h2 className="text-xl font-semibold text-white flex items-center gap-2">
            <Bot className="h-6 w-6 text-green-400" />
            Pupiter - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
          </h2>
        </div>
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div className="bg-gray-700 p-4 rounded-lg">
              <div className="flex items-center justify-between">
                <span className="text-gray-300">–°—Ç–∞—Ç—É—Å</span>
                <Activity className={`h-5 w-5 ${pupiterStatus.isRunning ? 'text-green-400' : 'text-gray-400'}`} />
              </div>
              <div className="text-xl font-bold text-white mt-2">
                {pupiterStatus.isRunning ? '–†–∞–±–æ—Ç–∞–µ—Ç' : '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
              </div>
              <div className="text-sm text-gray-400">{pupiterStatus.currentTask}</div>
            </div>
            <div className="bg-gray-700 p-4 rounded-lg">
              <div className="flex items-center justify-between">
                <span className="text-gray-300">–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
                <Monitor className="h-5 w-5 text-blue-400" />
              </div>
              <div className="text-xl font-bold text-white mt-2">{pupiterStatus.progress}%</div>
              <div className="w-full bg-gray-600 rounded-full h-2 mt-2">
                <div 
                  className="bg-blue-500 h-2 rounded-full transition-all"
                  style={{ width: `${pupiterStatus.progress}%` }}
                ></div>
              </div>
            </div>
            <div className="bg-gray-700 p-4 rounded-lg">
              <div className="flex items-center justify-between">
                <span className="text-gray-300">–ü—Ä–æ—Ñ–∏–ª–∏</span>
                <Target className="h-5 w-5 text-purple-400" />
              </div>
              <div className="text-xl font-bold text-white mt-2">
                {pupiterStatus.activeProfiles}/{pupiterStatus.totalProfiles}
              </div>
              <div className="text-sm text-gray-400">–ê–∫—Ç–∏–≤–Ω—ã—Ö/–í—Å–µ–≥–æ</div>
            </div>
          </div>

          <div className="grid grid-cols-2 md:grid-cols-5 gap-3 mb-6">
            <Button 
              onClick={handleStartAutomation}
              disabled={pupiterStatus.isRunning || !contentReady || !accountSaved}
              className="bg-green-600 hover:bg-green-700"
            >
              <Play className="h-4 w-4 mr-2" />
              –ó–∞–ø—É—Å—Ç–∏—Ç—å
            </Button>
            <Button 
              onClick={pupiterStatus.isPaused ? handleResumeAutomation : handlePauseAutomation}
              disabled={!pupiterStatus.isRunning}
              className="bg-yellow-600 hover:bg-yellow-700"
            >
              {pupiterStatus.isPaused ? (
                <>
                  <Play className="h-4 w-4 mr-2" />
                  –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å
                </>
              ) : (
                <>
                  <Pause className="h-4 w-4 mr-2" />
                  –ü–∞—É–∑–∞
                </>
              )}
            </Button>
            <Button 
              onClick={handleStopAutomation}
              disabled={!pupiterStatus.isRunning}
              className="bg-red-600 hover:bg-red-700"
            >
              <Square className="h-4 w-4 mr-2" />
              –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
            </Button>
            <Button 
              onClick={handleRestartAutomation}
              disabled={!pupiterStatus.isRunning}
              className="bg-blue-600 hover:bg-blue-700"
            >
              <RotateCw className="h-4 w-4 mr-2" />
              –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫
            </Button>
            <Button 
              onClick={handleDiagnostics}
              variant="outline"
              className="border-purple-600 text-purple-400 hover:bg-purple-600"
            >
              <Settings className="h-4 w-4 mr-2" />
              –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            </Button>
          </div>
        </div>
      </Card>

      {/* –°–µ–∫—Ü–∏—è 1: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º */}
      <Card>
        <div className="p-6 border-b border-gray-700">
          <h2 className="text-xl font-semibold text-white flex items-center gap-2">
            <Folder className="h-6 w-6 text-blue-400" />
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
          </h2>
        </div>
        <div className="p-6 space-y-4">
          <div className="flex gap-4">
            <Button 
              onClick={handleDropboxConnect}
              variant="outline"
              className="flex items-center gap-2"
            >
              <Download className="h-4 w-4" />
              –ü–æ–¥–∫–ª—é—á–∏—Ç—å Dropbox –ø–∞–ø–∫—É
            </Button>
            <Button 
              onClick={() => fileInputRef.current?.click()}
              className="flex items-center gap-2"
            >
              <Upload className="h-4 w-4" />
              –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã
            </Button>
          </div>
          
          <input
            ref={fileInputRef}
            type="file"
            multiple
            accept="video/*"
            onChange={handleFileUpload}
            className="hidden"
          />

          <div className="flex items-center gap-2">
            {contentReady ? (
              <>
                <Check className="h-5 w-5 text-green-400" />
                <span className="text-green-400">‚úì –ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ ({mediaFiles.length} —Ñ–∞–π–ª–æ–≤)</span>
              </>
            ) : (
              <>
                <AlertTriangle className="h-5 w-5 text-yellow-400" />
                <span className="text-yellow-400">‚ö† –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</span>
              </>
            )}
          </div>
        </div>
      </Card>

      {/* –°–µ–∫—Ü–∏—è 2: –î–∞–Ω–Ω—ã–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞ */}
      <Card>
        <div className="p-6 border-b border-gray-700">
          <h2 className="text-xl font-semibold text-white flex items-center gap-2">
            <Shield className="h-6 w-6 text-pink-400" />
            –î–∞–Ω–Ω—ã–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞
          </h2>
        </div>
        <div className="p-6 space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="instagram-login">Instagram –ª–æ–≥–∏–Ω/email</Label>
              <Input
                id="instagram-login"
                type="text"
                value={instagramAccount.login}
                onChange={(e) => setInstagramAccount({...instagramAccount, login: e.target.value})}
                placeholder="example@mail.com"
              />
            </div>
            <div>
              <Label htmlFor="instagram-password">Instagram –ø–∞—Ä–æ–ª—å</Label>
              <Input
                id="instagram-password"
                type="password"
                value={instagramAccount.password}
                onChange={(e) => setInstagramAccount({...instagramAccount, password: e.target.value})}
                placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
              />
            </div>
          </div>
          <div>
            <Label htmlFor="profile-name">–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è (–¥–ª—è AdsPower)</Label>
            <Input
              id="profile-name"
              type="text"
              value={instagramAccount.profileName || instagramAccount.login}
              onChange={(e) => setInstagramAccount({...instagramAccount, profileName: e.target.value})}
              placeholder="–ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑ –ª–æ–≥–∏–Ω–∞"
            />
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="max-posts">–ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å</Label>
              <Input
                id="max-posts"
                type="number"
                min="1"
                max="20"
                value={instagramAccount.maxPostsPerDay}
                onChange={(e) => setInstagramAccount({...instagramAccount, maxPostsPerDay: parseInt(e.target.value) || 3})}
              />
            </div>
            <div>
              <Label htmlFor="dropbox-folder">–ü–∞–ø–∫–∞ Dropbox</Label>
              <Input
                id="dropbox-folder"
                type="text"
                value={instagramAccount.dropboxFolder}
                onChange={(e) => setInstagramAccount({...instagramAccount, dropboxFolder: e.target.value})}
                placeholder="/"
              />
            </div>
          </div>
          <Button onClick={handleSaveInstagram} className="w-full">
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
          </Button>
          <div className="flex items-center gap-2">
            {accountSaved ? (
              <>
                <Check className="h-5 w-5 text-green-400" />
                <span className="text-green-400">‚úì –î–∞–Ω–Ω—ã–µ Instagram —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</span>
              </>
            ) : (
              <>
                <AlertTriangle className="h-5 w-5 text-gray-400" />
                <span className="text-gray-400">–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã</span>
              </>
            )}
          </div>
        </div>
      </Card>

      {/* –°–µ–∫—Ü–∏—è 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—è */}
      <Card>
        <div className="p-6 border-b border-gray-700">
          <h2 className="text-xl font-semibold text-white flex items-center gap-2">
            <Zap className="h-6 w-6 text-yellow-400" />
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—è
          </h2>
        </div>
        <div className="p-6 space-y-4">
          <Button 
            onClick={handleCreateAdsPowerProfile}
            disabled={!accountSaved}
            className="w-full bg-yellow-600 hover:bg-yellow-700"
          >
            üöÄ –°–æ–∑–¥–∞—Ç—å AdsPower –ø—Ä–æ—Ñ–∏–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          </Button>
          <div className="text-sm text-gray-400">
            –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome 136-138, Windows 10/11, WebGL –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
          </div>
        </div>
      </Card>

      {/* –°–µ–∫—Ü–∏—è 4: –¢–∞–±–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ */}
      <Card>
        <div className="p-6 border-b border-gray-700">
          <h2 className="text-xl font-semibold text-white flex items-center gap-2">
            <Settings className="h-6 w-6 text-gray-400" />
            –¢–∞–±–ª–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
          </h2>
        </div>
        <div className="p-6 space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Label htmlFor="posts-per-day">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: {settings.postsPerDay}</Label>
              <input
                id="posts-per-day"
                type="range"
                min="1"
                max="20"
                value={settings.postsPerDay}
                onChange={(e) => setSettings({...settings, postsPerDay: parseInt(e.target.value)})}
                className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer mt-2"
              />
              <div className="flex justify-between text-xs text-gray-400 mt-1">
                <span>1</span>
                <span>20</span>
              </div>
            </div>
            <div>
              <Label htmlFor="time-between">–í—Ä–µ–º—è –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏ (—á–∞—Å—ã): {settings.timeBetweenPosts}—á</Label>
              <input
                id="time-between"
                type="range"
                min="1"
                max="24"
                value={settings.timeBetweenPosts}
                onChange={(e) => setSettings({...settings, timeBetweenPosts: parseInt(e.target.value)})}
                className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer mt-2"
              />
              <div className="flex justify-between text-xs text-gray-400 mt-1">
                <span>1—á</span>
                <span>24—á</span>
              </div>
            </div>
          </div>
          
          <div className="flex items-center justify-between">
            <Label>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö</Label>
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={settings.autoRestart}
                onChange={(e) => setSettings({...settings, autoRestart: e.target.checked})}
                className="sr-only peer"
              />
              <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
            </label>
          </div>

          <div className="flex items-center justify-between">
            <Label>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏</Label>
            <label className="relative inline-flex items-center cursor-pointer">
              <input
                type="checkbox"
                checked={settings.useProxy}
                onChange={(e) => setSettings({...settings, useProxy: e.target.checked})}
                className="sr-only peer"
              />
              <div className="w-11 h-6 bg-gray-600 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
            </label>
          </div>
        </div>
      </Card>

      {/* –°–µ–∫—Ü–∏—è 5: –ú–æ–∏ Instagram –∞–∫–∫–∞—É–Ω—Ç—ã */}
      {userAccounts.length > 0 && (
        <Card>
          <div className="p-6 border-b border-gray-700">
            <h2 className="text-xl font-semibold text-white flex items-center gap-2">
              <Users className="h-6 w-6 text-blue-400" />
              –ú–æ–∏ Instagram –∞–∫–∫–∞—É–Ω—Ç—ã ({userAccounts.length})
            </h2>
          </div>
          <div className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {userAccounts.map((account, index) => (
                <div key={account.id} className="bg-gray-700 p-4 rounded-lg border border-gray-600">
                  <div className="flex items-center justify-between mb-3">
                    <h3 className="font-semibold text-white">{account.displayName}</h3>
                    <div className={`px-2 py-1 rounded text-xs ${
                      account.status === 'active' ? 'bg-green-600 text-white' :
                      account.status === 'pending' ? 'bg-yellow-600 text-white' :
                      'bg-red-600 text-white'
                    }`}>
                      {account.status}
                    </div>
                  </div>
                  <div className="space-y-2 text-sm">
                    <div className="flex justify-between">
                      <span className="text-gray-400">–õ–æ–≥–∏–Ω:</span>
                      <span className="text-white">{account.username}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">–ü–æ—Å—Ç–æ–≤/–¥–µ–Ω—å:</span>
                      <span className="text-white">{account.maxPostsPerDay}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-gray-400">AdsPower:</span>
                      <span className={`${
                        account.adsPowerStatus === 'created' ? 'text-green-400' :
                        account.adsPowerStatus === 'creating' ? 'text-yellow-400' :
                        'text-gray-400'
                      }`}>
                        {account.adsPowerStatus === 'created' ? '‚úÖ –°–æ–∑–¥–∞–Ω' :
                         account.adsPowerStatus === 'creating' ? '‚è≥ –°–æ–∑–¥–∞–µ—Ç—Å—è' :
                         account.adsPowerStatus === 'error' ? '‚ùå –û—à–∏–±–∫–∞' :
                         '‚ö™ –ù–µ —Å–æ–∑–¥–∞–Ω'}
                      </span>
                    </div>
                    {account.isRunning && (
                      <div className="flex items-center gap-1 text-green-400">
                        <Activity className="h-3 w-3" />
                        <span className="text-xs">–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞</span>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </Card>
      )}

      {/* –°–µ–∫—Ü–∏—è 6: –õ–æ–≥–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ */}
      <Card>
        <div className="p-6 border-b border-gray-700">
          <h2 className="text-xl font-semibold text-white flex items-center gap-2">
            <BarChart3 className="h-6 w-6 text-green-400" />
            –õ–æ–≥–∏ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
          </h2>
        </div>
        <div className="p-6">
          <div className="bg-black p-4 rounded-lg font-mono text-sm max-h-64 overflow-y-auto">
            {pupiterStatus.logs.length > 0 ? (
              pupiterStatus.logs.map((log, index) => (
                <div key={index} className="text-green-400 mb-1">
                  {log}
                </div>
              ))
            ) : (
              <div className="text-gray-400">–õ–æ–≥–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å...</div>
            )}
          </div>
          {pupiterStatus.errors.length > 0 && (
            <div className="mt-4">
              <h4 className="text-red-400 font-semibold mb-2">–û—à–∏–±–∫–∏:</h4>
              <div className="bg-red-900 p-3 rounded-lg">
                {pupiterStatus.errors.map((error, index) => (
                  <div key={index} className="text-red-300 text-sm mb-1">
                    {error}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </Card>
    </div>
  );
} 