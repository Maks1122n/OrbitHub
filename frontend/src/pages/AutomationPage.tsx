import React, { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Card } from '../components/ui/Card';
import { Button } from '../components/ui/Button';
import { Input } from '../components/ui/Input';
import toast from 'react-hot-toast';

import { automationApi, AutomationStatus, PuppeteerHealth, PublishResult } from '../services/automationApi';
import { accountsApi } from '../services/accountsApi';

export const AutomationPage: React.FC = () => {
  const [showTestLogin, setShowTestLogin] = useState(false);
  const [testCredentials, setTestCredentials] = useState({
    username: '',
    password: '',
    adspowerProfileId: ''
  });
  const [selectedAccount, setSelectedAccount] = useState<string>('');

  const queryClient = useQueryClient();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const { data: statusData, isLoading: statusLoading } = useQuery(
    ['automation-status'],
    automationApi.getStatus,
    {
      refetchInterval: 5000, // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
      retry: 2
    }
  );

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  const { data: publishResults = [], isLoading: resultsLoading } = useQuery(
    ['publish-results'],
    automationApi.getAllResults,
    {
      refetchInterval: 10000,
      retry: 1
    }
  );

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
  const { data: activeSessions = [] } = useQuery(
    ['active-sessions'],
    automationApi.getActiveSessions,
    {
      refetchInterval: 10000,
      retry: 1
    }
  );

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const { data: accounts = [] } = useQuery(
    ['accounts'],
    accountsApi.getAccounts
  );

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const startMutation = useMutation(
    automationApi.startAutomation,
    {
      onSuccess: () => {
        toast.success('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!');
        queryClient.invalidateQueries(['automation-status']);
      },
      onError: (error: any) => {
        toast.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`);
      }
    }
  );

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const stopMutation = useMutation(
    automationApi.stopAutomation,
    {
      onSuccess: () => {
        toast.success('‚èπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        queryClient.invalidateQueries(['automation-status']);
      },
      onError: (error: any) => {
        toast.error(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${error.message}`);
      }
    }
  );

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–∞
  const testLoginMutation = useMutation(
    (credentials: { username: string; password: string; adspowerProfileId?: string }) =>
      automationApi.testLogin(credentials.username, credentials.password, credentials.adspowerProfileId),
    {
      onSuccess: (data) => {
        if (data.success) {
          toast.success(`‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω –¥–ª—è @${data.data.username}`);
        } else {
          toast.error(`‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: ${data.error}`);
        }
        setShowTestLogin(false);
        setTestCredentials({ username: '', password: '', adspowerProfileId: '' });
      },
      onError: (error: any) => {
        toast.error(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
      }
    }
  );

  // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
  const emergencyStopMutation = useMutation(
    automationApi.emergencyStop,
    {
      onSuccess: () => {
        toast.success('üõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        queryClient.invalidateQueries(['automation-status']);
        queryClient.invalidateQueries(['active-sessions']);
      },
      onError: (error: any) => {
        toast.error(`–û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${error.message}`);
      }
    }
  );

  const handleTestLogin = () => {
    if (!testCredentials.username || !testCredentials.password) {
      toast.error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å');
      return;
    }

    testLoginMutation.mutate({
      username: testCredentials.username,
      password: testCredentials.password,
      adspowerProfileId: testCredentials.adspowerProfileId || undefined
    });
  };

  const handleAccountSelect = (accountId: string) => {
    const account = accounts.find(acc => acc._id === accountId);
    if (account) {
      setTestCredentials({
        username: account.username,
        password: account.password || '',
        adspowerProfileId: account.adspowerProfileId || ''
      });
      setSelectedAccount(accountId);
    }
  };

  const formatDuration = (ms: number): string => {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    
    if (hours > 0) {
      return `${hours}—á ${minutes % 60}–º`;
    } else if (minutes > 0) {
      return `${minutes}–º ${seconds % 60}—Å`;
    } else {
      return `${seconds}—Å`;
    }
  };

  const getStatusColor = (status: 'healthy' | 'unhealthy' | boolean): string => {
    if (typeof status === 'boolean') {
      return status ? 'text-green-400 bg-green-500/20' : 'text-red-400 bg-red-500/20';
    }
    return status === 'healthy' ? 'text-green-400 bg-green-500/20' : 'text-red-400 bg-red-500/20';
  };

  const automation = statusData?.automation;
  const puppeteer = statusData?.puppeteer;

  return (
    <div className="p-6 max-w-7xl mx-auto">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-white mb-2">Instagram –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è</h1>
        <p className="text-gray-400">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Puppeteer</p>
      </div>

      {/* –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        {/* –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã */}
        <Card className="lg:col-span-2">
          <div className="p-6">
            <h3 className="text-lg font-semibold text-white mb-4">–°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏</h3>
            
            {statusLoading ? (
              <div className="text-center py-4">
                <svg className="h-8 w-8 animate-spin mx-auto mb-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                <p className="text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...</p>
              </div>
            ) : (
              <div className="space-y-4">
                {/* –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å */}
                <div className="flex items-center justify-between p-4 bg-gray-700 rounded-lg">
                  <div>
                    <div className="flex items-center gap-3">
                      <div className={`w-3 h-3 rounded-full ${automation?.isRunning ? 'bg-green-500' : 'bg-red-500'}`}></div>
                      <span className="text-white font-medium">
                        {automation?.isRunning ? '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞' : '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'}
                      </span>
                    </div>
                    {automation?.currentTask && (
                      <p className="text-sm text-gray-400 mt-1">{automation.currentTask}</p>
                    )}
                  </div>
                  
                  <div className="flex gap-2">
                    {!automation?.isRunning ? (
                      <Button
                        onClick={() => startMutation.mutate()}
                        loading={startMutation.isLoading}
                        className="bg-green-600 hover:bg-green-700"
                      >
                        <svg className="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h8m-8 0V9a3 3 0 013-3h2a3 3 0 013 3v5m-6 0a3 3 0 103 3H9a3 3 0 01-3-3z" />
                        </svg>
                        –ó–∞–ø—É—Å—Ç–∏—Ç—å
                      </Button>
                    ) : (
                      <>
                        <Button
                          variant="secondary"
                          onClick={() => stopMutation.mutate()}
                          loading={stopMutation.isLoading}
                        >
                          <svg className="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 10h6v4H9V10z" />
                          </svg>
                          –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                        </Button>
                        <Button
                          variant="secondary"
                          onClick={() => emergencyStopMutation.mutate()}
                          loading={emergencyStopMutation.isLoading}
                          className="bg-red-600 hover:bg-red-700"
                        >
                          üõë –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                        </Button>
                      </>
                    )}
                  </div>
                </div>

                {/* –ú–µ—Ç—Ä–∏–∫–∏ */}
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-400">{automation?.tasksInQueue || 0}</div>
                    <div className="text-sm text-gray-400">–í –æ—á–µ—Ä–µ–¥–∏</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-400">{automation?.completedToday || 0}</div>
                    <div className="text-sm text-gray-400">–°–µ–≥–æ–¥–Ω—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-red-400">{automation?.failedToday || 0}</div>
                    <div className="text-sm text-gray-400">–û—à–∏–±–æ–∫ —Å–µ–≥–æ–¥–Ω—è</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-purple-400">{automation?.activeBrowsers || 0}</div>
                    <div className="text-sm text-gray-400">–ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤</div>
                  </div>
                </div>

                {/* –°—Ç–∞—Ç—É—Å Puppeteer */}
                <div className="border-t border-gray-600 pt-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <span className="text-white font-medium">Puppeteer Engine</span>
                      <span className={`ml-2 px-2 py-1 rounded text-xs ${getStatusColor(puppeteer?.status === 'healthy')}`}>
                        {puppeteer?.status === 'healthy' ? '–ó–¥–æ—Ä–æ–≤' : '–ü—Ä–æ–±–ª–µ–º—ã'}
                      </span>
                    </div>
                    <div className="text-sm text-gray-400">
                      AdsPower: {puppeteer?.adspowerConnected ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
        </Card>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <Card>
          <div className="p-6">
            <h3 className="text-lg font-semibold text-white mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
            
            <div className="space-y-3">
              <Button
                className="w-full"
                variant="secondary"
                onClick={() => setShowTestLogin(true)}
              >
                <svg className="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                –¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ Instagram
              </Button>
              
              <Button
                className="w-full"
                variant="ghost"
                onClick={() => queryClient.invalidateQueries(['automation-status'])}
              >
                <svg className="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
              </Button>

              <Button
                className="w-full"
                variant="ghost"
                onClick={() => automationApi.healthCheck()}
              >
                <svg className="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
                –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
              </Button>
            </div>

            {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ */}
            {activeSessions.length > 0 && (
              <div className="mt-4 pt-4 border-t border-gray-600">
                <h4 className="text-sm font-medium text-gray-400 mb-2">–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏</h4>
                <div className="space-y-2">
                  {activeSessions.map((session, index) => (
                    <div key={index} className="text-xs text-gray-300 flex justify-between">
                      <span>@{session.username}</span>
                      <span>{session.profileId}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>
        </Card>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–∞ */}
      {showTestLogin && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <Card className="w-full max-w-md">
            <div className="p-6">
              <h3 className="text-lg font-semibold text-white mb-4">–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ –≤ Instagram</h3>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-400 mb-2">
                    –í—ã–±—Ä–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                  </label>
                  <select
                    className="w-full p-3 bg-gray-700 border border-gray-600 rounded-lg text-white focus:border-blue-500 focus:outline-none"
                    value={selectedAccount}
                    onChange={(e) => handleAccountSelect(e.target.value)}
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é</option>
                    {accounts.map(account => (
                      <option key={account._id} value={account._id}>
                        @{account.username} ({account.displayName})
                      </option>
                    ))}
                  </select>
                </div>

                <Input
                  placeholder="–õ–æ–≥–∏–Ω Instagram"
                  value={testCredentials.username}
                  onChange={(e) => setTestCredentials({
                    ...testCredentials,
                    username: e.target.value
                  })}
                />

                <Input
                  type="password"
                  placeholder="–ü–∞—Ä–æ–ª—å Instagram"
                  value={testCredentials.password}
                  onChange={(e) => setTestCredentials({
                    ...testCredentials,
                    password: e.target.value
                  })}
                />

                <Input
                  placeholder="AdsPower Profile ID (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                  value={testCredentials.adspowerProfileId}
                  onChange={(e) => setTestCredentials({
                    ...testCredentials,
                    adspowerProfileId: e.target.value
                  })}
                />
              </div>

              <div className="flex gap-2 mt-6">
                <Button
                  onClick={handleTestLogin}
                  loading={testLoginMutation.isLoading}
                >
                  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ö–æ–¥
                </Button>
                <Button
                  variant="secondary"
                  onClick={() => {
                    setShowTestLogin(false);
                    setTestCredentials({ username: '', password: '', adspowerProfileId: '' });
                    setSelectedAccount('');
                  }}
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </div>
            </div>
          </Card>
        </div>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ */}
      <Card>
        <div className="p-6">
          <h3 className="text-lg font-semibold text-white mb-4">–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</h3>
          
          {resultsLoading ? (
            <div className="text-center py-4">
              <svg className="h-6 w-6 animate-spin mx-auto mb-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
              <p className="text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...</p>
            </div>
          ) : publishResults.length === 0 ? (
            <div className="text-center py-8 text-gray-400">
              <svg className="h-12 w-12 mx-auto mb-4 opacity-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <p>–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</p>
            </div>
          ) : (
            <div className="space-y-3">
              {publishResults.slice(0, 10).map((result) => (
                <div
                  key={result.postId}
                  className="flex items-center justify-between p-4 bg-gray-700 rounded-lg"
                >
                  <div className="flex-1">
                    <div className="flex items-center gap-3">
                      <div className={`w-2 h-2 rounded-full ${result.success ? 'bg-green-500' : 'bg-red-500'}`}></div>
                      <span className="text-white font-medium">
                        –ü–æ—Å—Ç {result.postId.slice(-8)}
                      </span>
                      <span className={`px-2 py-1 rounded text-xs ${result.success ? 'text-green-400 bg-green-500/20' : 'text-red-400 bg-red-500/20'}`}>
                        {result.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'}
                      </span>
                    </div>
                    {result.error && (
                      <p className="text-sm text-red-400 mt-1">{result.error}</p>
                    )}
                    {result.instagramUrl && (
                      <a
                        href={result.instagramUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-sm text-blue-400 hover:text-blue-300 mt-1 inline-block"
                      >
                        –û—Ç–∫—Ä—ã—Ç—å –≤ Instagram ‚Üí
                      </a>
                    )}
                  </div>
                  
                  <div className="text-right">
                    <div className="text-sm text-gray-400">
                      {formatDuration(result.duration)}
                    </div>
                    {result.screenshots.length > 0 && (
                      <div className="text-xs text-blue-400">
                        {result.screenshots.length} —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </Card>
    </div>
  );
}; 