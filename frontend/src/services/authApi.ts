import api from './api';

export interface User {
  _id: string;
  email: string;
  name: string;
  role: 'user' | 'admin';
  avatar?: string;
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface LoginData {
  email: string;
  password: string;
}

export interface RegisterData {
  name: string;
  email: string;
  password: string;
}

export interface AuthResponse {
  success: boolean;
  data: {
    user: User;
    token: string;
    tokens?: any;
  };
  error?: string;
}

export const authApi = {
  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  login: async (data: LoginData): Promise<AuthResponse> => {
    try {
      const response = await api.post('/auth/login', data);
      console.log('üîë API: Raw response from backend:', response);
      
      // Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É { success: boolean, data: { user, token } }
      return response;
    } catch (error) {
      console.error('üîë API: Login error:', error);
      throw error;
    }
  },

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  register: async (data: RegisterData): Promise<AuthResponse> => {
    try {
      const response = await api.post<AuthResponse>('/auth/register', data);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      if (response.success && response.data) {
        localStorage.setItem('authToken', response.data.token);
        localStorage.setItem('user', JSON.stringify(response.data.user));
      }
      
      return response.data;
    } catch (error) {
      console.error('Registration error:', error);
      throw error;
    }
  },

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  logout: async (): Promise<void> => {
    try {
      await api.post('/auth/logout');
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
      localStorage.removeItem('authToken');
      localStorage.removeItem('user');
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCurrentUser: async (): Promise<User> => {
    try {
      const response = await api.get<User>('/auth/me');
      
      if (response.success && response.data) {
        localStorage.setItem('user', JSON.stringify(response.data));
        return response.data;
      }
      
      throw new Error('Failed to get current user');
    } catch (error) {
      console.error('Get current user error:', error);
      throw error;
    }
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  updateProfile: async (data: Partial<User>): Promise<User> => {
    try {
      const response = await api.put<User>('/auth/profile', data);
      
      if (response.success && response.data) {
        localStorage.setItem('user', JSON.stringify(response.data));
        return response.data;
      }
      
      throw new Error('Failed to update profile');
    } catch (error) {
      console.error('Update profile error:', error);
      throw error;
    }
  },

  // –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
  changePassword: async (oldPassword: string, newPassword: string): Promise<void> => {
    try {
      const response = await api.post('/auth/change-password', {
        oldPassword,
        newPassword
      });
      
      if (!response.success) {
        throw new Error(response.error || 'Failed to change password');
      }
    } catch (error) {
      console.error('Change password error:', error);
      throw error;
    }
  },

  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è (–∑–∞–ø—Ä–æ—Å)
  requestPasswordReset: async (email: string): Promise<void> => {
    try {
      const response = await api.post('/auth/reset-password-request', { email });
      
      if (!response.success) {
        throw new Error(response.error || 'Failed to request password reset');
      }
    } catch (error) {
      console.error('Password reset request error:', error);
      throw error;
    }
  },

  // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)
  resetPassword: async (token: string, newPassword: string): Promise<void> => {
    try {
      const response = await api.post('/auth/reset-password', {
        token,
        newPassword
      });
      
      if (!response.success) {
        throw new Error(response.error || 'Failed to reset password');
      }
    } catch (error) {
      console.error('Password reset error:', error);
      throw error;
    }
  },

  // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è email
  verifyEmail: async (token: string): Promise<void> => {
    try {
      const response = await api.post('/auth/verify-email', { token });
      
      if (!response.success) {
        throw new Error(response.error || 'Failed to verify email');
      }
    } catch (error) {
      console.error('Email verification error:', error);
      throw error;
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
  verifyToken: async (): Promise<boolean> => {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) return false;

      const response = await api.get('/auth/verify-token');
      return response.success;
    } catch (error) {
      console.error('Token verification error:', error);
      return false;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage
  getCurrentUserFromStorage: (): User | null => {
    try {
      const userStr = localStorage.getItem('user');
      return userStr ? JSON.parse(userStr) : null;
    } catch (error) {
      console.error('Error parsing user from localStorage:', error);
      return null;
    }
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  isAuthenticated: (): boolean => {
    const token = localStorage.getItem('authToken');
    const user = authApi.getCurrentUserFromStorage();
    return !!(token && user);
  }
}; 