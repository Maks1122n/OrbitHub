import api from './api';

export interface KomboProject {
  _id: string;
  name: string;
  description?: string;
  dropboxFolderId?: string;
  dropboxFolderPath?: string;
  localMediaPath?: string;
  instagramAccountId: string;
  instagramUsername: string;
  adsPowerProfileId?: string;
  adsPowerStatus: 'none' | 'creating' | 'created' | 'error';
  publicationSchedule: {
    enabled: boolean;
    frequency: 'hourly' | 'daily';
    postsPerHour?: number;
    postsPerDay?: number;
    specificTimes?: string[];
    timezone: string;
  };
  contentSettings: {
    randomOrder: boolean;
    addHashtags: boolean;
    defaultHashtags?: string[];
    addCaption: boolean;
    defaultCaption?: string;
  };
  status: 'draft' | 'active' | 'paused' | 'stopped' | 'error';
  isRunning: boolean;
  stats: {
    totalPublished: number;
    lastPublishedAt?: Date;
    successRate: number;
    errorsCount: number;
  };
  recentLogs: Array<{
    timestamp: Date;
    action: string;
    status: 'success' | 'error' | 'info';
    message: string;
    mediaFileName?: string;
  }>;
  createdAt: Date;
  updatedAt: Date;
}

export interface CreateKomboProjectRequest {
  name: string;
  description?: string;
  instagramAccountId?: string;
  dropboxFolderId?: string;
  publicationSchedule?: Partial<KomboProject['publicationSchedule']>;
  contentSettings?: Partial<KomboProject['contentSettings']>;
}

export interface InstagramAccountData {
  login: string;
  password: string;
  profileName?: string;
}

export interface MediaUploadResponse {
  success: boolean;
  message: string;
  data: {
    files_count: number;
    upload_path: string;
    files: Array<{
      original_name: string;
      size: number;
      path: string;
    }>;
  };
}

export interface KomboProjectStats {
  project: {
    name: string;
    status: string;
    isRunning: boolean;
    adsPowerStatus: string;
  };
  content: {
    totalMediaFiles: number;
    publishedCount: number;
    remainingCount: number;
  };
  performance: {
    successRate: number;
    errorsCount: number;
    lastPublishedAt?: Date;
  };
  schedule: {
    enabled: boolean;
    frequency: string;
    postsPerHour?: number;
    postsPerDay?: number;
  };
  recentLogs: Array<{
    timestamp: Date;
    action: string;
    status: string;
    message: string;
    mediaFileName?: string;
  }>;
}

class KomboApi {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ KOMBO –ø—Ä–æ–µ–∫—Ç—ã
  async getProjects() {
    const response = await api.get('/api/kombo');
    return response.data;
  }

  // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π KOMBO –ø—Ä–æ–µ–∫—Ç
  async createProject(data: CreateKomboProjectRequest) {
    const response = await api.post('/api/kombo', data);
    return response.data;
  }

  // üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
  async uploadMediaFiles(projectId: string, files: FileList): Promise<MediaUploadResponse> {
    const formData = new FormData();
    
    for (let i = 0; i < files.length; i++) {
      formData.append('mediaFiles', files[i]);
    }
    
    const response = await api.post(`/api/kombo/${projectId}/upload-media`, formData);
    return response.data;
  }

  // üìß –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞
  async saveInstagramData(projectId: string, data: InstagramAccountData) {
    const response = await api.post(`/api/kombo/${projectId}/save-instagram`, data);
    return response.data;
  }

  // ÔøΩÔøΩ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï AdsPower –ü–†–û–§–ò–õ–Ø
  async createAdsPowerProfileAuto(projectId: string) {
    const response = await api.post(`/api/kombo/${projectId}/create-adspower-auto`);
    return response.data;
  }

  // üéÆ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò
  async startFullCycle(projectId: string) {
    const response = await api.post(`/api/kombo/${projectId}/start-full-cycle`);
    return response.data;
  }

  // ‚èπ –û–°–¢–ê–ù–û–í–ö–ê –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò
  async stopFullCycle(projectId: string) {
    const response = await api.post(`/api/kombo/${projectId}/stop-full-cycle`);
    return response.data;
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞
  async getProjectStats(projectId: string): Promise<{ success: boolean; data: KomboProjectStats }> {
    const response = await api.get(`/api/kombo/${projectId}/stats`);
    return response.data;
  }

  // –ù–∞—Å—Ç—Ä–æ–∏—Ç—å AdsPower –ø—Ä–æ—Ñ–∏–ª—å (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
  async setupAdsPowerProfile(projectId: string) {
    const response = await api.post(`/api/kombo/${projectId}/setup-adspower`);
    return response.data;
  }

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
  async startProject(projectId: string) {
    const response = await api.post(`/api/kombo/${projectId}/start`);
    return response.data;
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥)
  async stopProject(projectId: string) {
    const response = await api.post(`/api/kombo/${projectId}/stop`);
    return response.data;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
  async updateProject(projectId: string, data: Partial<CreateKomboProjectRequest>) {
    const response = await api.put(`/api/kombo/${projectId}`, data);
    return response.data;
  }

  // –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
  async deleteProject(projectId: string) {
    const response = await api.delete(`/api/kombo/${projectId}`);
    return response.data;
  }
}

export const komboApi = new KomboApi();