import { EventEmitter } from 'events';
import { AdsPowerService, BrowserSession } from './AdsPowerService';
import { InstagramService, InstagramLoginResult, InstagramPublishResult } from './InstagramService';
import { DropboxService } from './DropboxService';
import logger from '../utils/logger';
import fs from 'fs';
import path from 'path';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Pupiter
export interface PupiterConfig {
  instagramLogin: string;
  instagramPassword: string;
  profileName: string;
  mediaFiles: string[];
  settings: {
    postsPerDay: number;
    timeBetweenPosts: number;
    autoRestart: boolean;
    useProxy: boolean;
  };
}

export interface PupiterStatus {
  isRunning: boolean;
  isPaused: boolean;
  currentTask: string;
  progress: number;
  adsPowerProfileId?: string;
  adsPowerStatus: 'none' | 'creating' | 'created' | 'running' | 'stopped' | 'error';
  instagramStatus: 'not_connected' | 'connecting' | 'authenticated' | 'error' | 'blocked';
  queueStatus: 'empty' | 'ready' | 'running' | 'paused';
  publishedToday: number;
  totalPublished: number;
  remainingInQueue: number;
  errors: string[];
  logs: string[];
  lastActivity: string;
  retryCount?: number;
  maxRetries?: number;
  healthScore?: number; // 0-100 –æ—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
}

export interface PupiterLog {
  timestamp: Date;
  level: 'info' | 'success' | 'warning' | 'error';
  message: string;
  details?: any;
}

// –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è
class HealthMonitor {
  private healthScore: number = 100;
  private issues: string[] = [];
  
  updateHealth(score: number, issue?: string): void {
    this.healthScore = Math.max(0, Math.min(100, score));
    if (issue) {
      this.issues.push(issue);
      if (this.issues.length > 10) {
        this.issues = this.issues.slice(-5);
      }
    }
  }
  
  getHealthScore(): number {
    return this.healthScore;
  }
  
  getIssues(): string[] {
    return [...this.issues];
  }
  
  reset(): void {
    this.healthScore = 100;
    this.issues = [];
  }
}

// –°–∏—Å—Ç–µ–º–∞ retry —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
class RetrySystem {
  static async executeWithRetry<T>(
    operation: () => Promise<T>,
    maxRetries: number = 3,
    initialDelayMs: number = 1000,
    backoffMultiplier: number = 2,
    onRetry?: (attempt: number, error: Error) => void
  ): Promise<T> {
    let lastError: Error;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        return await operation();
      } catch (error) {
        lastError = error as Error;
        
        if (onRetry) {
          onRetry(attempt, lastError);
        }
        
        if (attempt === maxRetries) {
          break;
        }
        
        const delay = initialDelayMs * Math.pow(backoffMultiplier, attempt - 1);
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    throw new Error(`Operation failed after ${maxRetries} attempts: ${lastError!.message}`);
  }
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
class StateManager {
  private state: Map<string, any> = new Map();
  
  setState(key: string, value: any): void {
    this.state.set(key, value);
  }
  
  getState(key: string): any {
    return this.state.get(key);
  }
  
  hasState(key: string): boolean {
    return this.state.has(key);
  }
  
  removeState(key: string): void {
    this.state.delete(key);
  }
  
  clearState(): void {
    this.state.clear();
  }
}

/**
 * üéÆ PUPITER - –ü—Ä–æ–¥–∞–∫—à–Ω-–≥–æ—Ç–æ–≤—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Instagram –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—è–º–∏ —Å retry –ª–æ–≥–∏–∫–æ–π
 * - –ù–∞–¥–µ–∂–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å Instagram —Å–µ—Å—Å–∏–π —Å error recovery
 * - –£–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ —Å backoff —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
 * - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∏ health checks
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö
 * - –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export class PupiterService extends EventEmitter {
  private status: PupiterStatus;
  private config: PupiterConfig | null = null;
  private adsPowerService: AdsPowerService;
  private instagramService: InstagramService;
  private dropboxService: DropboxService;
  private currentSession: BrowserSession | null = null;
  private publishQueue: string[] = [];
  private publishTimer: NodeJS.Timeout | null = null;
  private monitoringTimer: NodeJS.Timeout | null = null;
  private healthCheckTimer: NodeJS.Timeout | null = null;
  private maxRetries = 3;
  private retryCount = 0;
  private healthMonitor: HealthMonitor;
  private stateManager: StateManager;
  private isInitialized = false;

  constructor() {
    super();
    this.healthMonitor = new HealthMonitor();
    this.stateManager = new StateManager();
    
    this.adsPowerService = new AdsPowerService();
    this.instagramService = new InstagramService();
    this.dropboxService = new DropboxService();
    
    this.status = {
      isRunning: false,
      isPaused: false,
      currentTask: '–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É',
      progress: 0,
      adsPowerStatus: 'none',
      instagramStatus: 'not_connected',
      queueStatus: 'empty',
      publishedToday: 0,
      totalPublished: 0,
      remainingInQueue: 0,
      errors: [],
      logs: [],
      lastActivity: new Date().toISOString(),
      retryCount: 0,
      maxRetries: this.maxRetries,
      healthScore: 100
    };

    this.initialize();
  }

  /**
   * üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
   */
  private async initialize(): Promise<void> {
    try {
      this.log('üéÆ Pupiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...', 'info');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
      await this.performInitialHealthCheck();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π health check –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
      this.healthCheckTimer = setInterval(() => {
        this.performHealthCheck();
      }, 120000);
      
      this.isInitialized = true;
      this.log('‚úÖ Pupiter —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'success');
      
    } catch (error: any) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pupiter: ${error.message}`, 'error');
      this.healthMonitor.updateHealth(0, 'Initialization failed');
    }
  }

  /**
   * üè• –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  private async performInitialHealthCheck(): Promise<void> {
    try {
      const checks = {
        adspower: false,
        dropbox: false,
        filesystem: false
      };
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ AdsPower
      try {
        checks.adspower = await this.adsPowerService.checkConnection();
        this.log(checks.adspower ? '‚úÖ AdsPower –¥–æ—Å—Ç—É–ø–µ–Ω' : '‚ö†Ô∏è AdsPower –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 
                checks.adspower ? 'success' : 'warning');
      } catch (error) {
        this.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AdsPower', 'error');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ Dropbox
      try {
        checks.dropbox = this.dropboxService.isServiceEnabled();
        this.log(checks.dropbox ? '‚úÖ Dropbox –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ö†Ô∏è Dropbox –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 
                checks.dropbox ? 'success' : 'warning');
      } catch (error) {
        this.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Dropbox', 'error');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
      try {
        const uploadsDir = path.join(process.cwd(), 'uploads');
        checks.filesystem = fs.existsSync(uploadsDir);
        if (!checks.filesystem) {
          fs.mkdirSync(uploadsDir, { recursive: true });
          checks.filesystem = true;
        }
        this.log('‚úÖ –§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞', 'success');
      } catch (error) {
        this.log('‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã', 'error');
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º health score
      const healthScore = (Object.values(checks).filter(Boolean).length / Object.keys(checks).length) * 100;
      this.healthMonitor.updateHealth(healthScore);
      this.status.healthScore = healthScore;
      
    } catch (error: any) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ health check: ${error.message}`, 'error');
      this.healthMonitor.updateHealth(0, 'Health check failed');
    }
  }

  /**
   * üöÄ –ì–õ–ê–í–ù–ê–Ø –ö–û–ú–ê–ù–î–ê: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é
   */
  async startFullAutomation(config: PupiterConfig): Promise<{ success: boolean; message: string }> {
    if (this.status.isRunning) {
      throw new Error('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
    }

    if (!this.isInitialized) {
      throw new Error('–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }

    try {
      this.config = config;
      this.status.isRunning = true;
      this.status.isPaused = false;
      this.retryCount = 0;
      this.status.retryCount = 0;
      this.healthMonitor.reset();

      this.log('üöÄ Pupiter: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Instagram', 'info');
      this.emit('automation_started', config);
      
      // –≠—Ç–∞–ø 1: –°–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã (0-15%)
      await this.performSystemDiagnostics();
      
      // –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ AdsPower –ø—Ä–æ—Ñ–∏–ª—è (15-45%)
      await this.setupAdsPowerProfile();
      
      // –≠—Ç–∞–ø 3: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram (45-70%)
      await this.authenticateInstagram();
      
      // –≠—Ç–∞–ø 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (70-85%)
      await this.initializePublishQueue();
      
      // –≠—Ç–∞–ø 5: –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (85-100%)
      await this.startPublishing();
      
      this.updateStatus('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 100);
      this.log('üéØ Pupiter –≥–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç–µ', 'success');
      this.emit('automation_ready');
      
      return { success: true, message: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' };
      
    } catch (error: any) {
      await this.handleStartupError(error);
      throw error;
    }
  }

  /**
   * üîß –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
   */
  private async performSystemDiagnostics(): Promise<void> {
    this.updateStatus('üîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞...', 5);
    
    const diagnostics = {
      adspower: false,
      instagram: false,
      content: false,
      configuration: false
    };
    
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ AdsPower —Å retry
      diagnostics.adspower = await RetrySystem.executeWithRetry(
        () => this.adsPowerService.checkConnection(),
        2,
        1000,
        2,
        (attempt, error) => this.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AdsPower: ${error.message}`, 'warning')
      );
      
      if (!diagnostics.adspower) {
        throw new Error('AdsPower –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://local.adspower.net:50325');
      }
      this.log('‚úÖ AdsPower API –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤', 'success');
      this.updateStatus('‚úÖ AdsPower –ø—Ä–æ–≤–µ—Ä–µ–Ω', 8);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Instagram
      diagnostics.instagram = !!(this.config?.instagramLogin && this.config?.instagramPassword);
      if (!diagnostics.instagram) {
        throw new Error('–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞');
      }
      this.log('‚úÖ –î–∞–Ω–Ω—ã–µ Instagram –≤–∞–ª–∏–¥–Ω—ã', 'success');
      this.updateStatus('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞', 10);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      diagnostics.content = !!(this.config?.mediaFiles && this.config.mediaFiles.length > 0);
      if (!diagnostics.content) {
        throw new Error('–ù–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
      let validFiles = 0;
      for (const filePath of this.config!.mediaFiles) {
        if (fs.existsSync(filePath)) {
          validFiles++;
        } else {
          this.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`, 'warning');
        }
      }
      
      if (validFiles === 0) {
        throw new Error('–ù–∏ –æ–¥–∏–Ω –º–µ–¥–∏–∞ —Ñ–∞–π–ª –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      this.log(`‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤: ${validFiles}/${this.config!.mediaFiles.length} —Ñ–∞–π–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ`, 'success');
      this.updateStatus('‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω', 12);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      diagnostics.configuration = !!(this.config?.settings);
      if (!diagnostics.configuration) {
        throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏');
      }
      this.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω—ã', 'success');
      
      const healthScore = (Object.values(diagnostics).filter(Boolean).length / Object.keys(diagnostics).length) * 100;
      this.healthMonitor.updateHealth(healthScore);
      this.status.healthScore = healthScore;
      
      this.updateStatus('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 15);
      
    } catch (error: any) {
      this.healthMonitor.updateHealth(25, `Diagnostics failed: ${error.message}`);
      throw error;
    }
  }

  /**
   * üñ•Ô∏è –ù–∞–¥–µ–∂–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ AdsPower –ø—Ä–æ—Ñ–∏–ª—è
   */
  private async setupAdsPowerProfile(): Promise<void> {
    this.updateStatus('üñ•Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ AdsPower –ø—Ä–æ—Ñ–∏–ª—è...', 20);
    this.status.adsPowerStatus = 'creating';
    
    try {
      // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è
      this.log('üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è...', 'info');
      this.updateStatus('üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...', 25);
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å retry –ª–æ–≥–∏–∫–æ–π
      const result = await RetrySystem.executeWithRetry(async () => {
        return await this.adsPowerService.createInstagramProfile({
          login: this.config!.instagramLogin,
          password: this.config!.instagramPassword,
          profileName: this.config!.profileName
        });
      }, 2, 3000, 2, (attempt, error) => {
        this.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} —Å–æ–∑–¥–∞–Ω–∏—è AdsPower –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`, 'warning');
      });
      
      this.status.adsPowerProfileId = result.profileId;
      this.status.adsPowerStatus = 'created';
      this.stateManager.setState('adsPowerProfileId', result.profileId);
      
      this.log(`‚úÖ AdsPower –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ID ${result.profileId}`, 'success');
      this.updateStatus('üöÄ –ó–∞–ø—É—Å–∫ AdsPower –ø—Ä–æ—Ñ–∏–ª—è...', 35);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å retry –ª–æ–≥–∏–∫–æ–π
      const session = await RetrySystem.executeWithRetry(async () => {
        return await this.adsPowerService.startProfile(result.profileId);
      }, 3, 2000, 2, (attempt, error) => {
        this.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∑–∞–ø—É—Å–∫–∞ AdsPower –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`, 'warning');
      });
      
      this.currentSession = session;
      this.status.adsPowerStatus = 'running';
      this.stateManager.setState('browserSession', session);
      
      this.log('üöÄ AdsPower –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 'success');
      this.updateStatus('‚úÖ AdsPower –ø—Ä–æ—Ñ–∏–ª—å –∞–∫—Ç–∏–≤–µ–Ω', 45);
      
    } catch (error: any) {
      this.status.adsPowerStatus = 'error';
      this.healthMonitor.updateHealth(this.healthMonitor.getHealthScore() - 30, `AdsPower setup failed: ${error.message}`);
      throw new Error(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AdsPower: ${error.message}`);
    }
  }

  /**
   * üîê –ù–∞–¥–µ–∂–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram
   */
  private async authenticateInstagram(): Promise<void> {
    this.updateStatus('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram...', 50);
    this.status.instagramStatus = 'connecting';
    
    if (!this.currentSession) {
      throw new Error('AdsPower —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
    }
    
    try {
      // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å retry –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      const loginResult = await RetrySystem.executeWithRetry(async () => {
        return await this.instagramService.loginToInstagram(
          this.currentSession!,
          this.config!.instagramLogin,
          this.config!.instagramPassword,
          { 
            saveSession: true, 
            skipIfLoggedIn: true 
          }
        );
      }, 2, 5000, 2, (attempt, error) => {
        this.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Instagram: ${error.message}`, 'warning');
        this.updateStatus(`üîê –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ${attempt}...`, 50 + (attempt * 5));
      });
      
      if (!loginResult.success) {
        this.status.instagramStatus = 'error';
        
        if (loginResult.requiresVerification) {
          throw new Error(`Instagram —Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: ${loginResult.challengeType}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –≤—Ä—É—á–Ω—É—é.`);
        }
        
        throw new Error(loginResult.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Instagram');
      }
      
      this.status.instagramStatus = 'authenticated';
      this.stateManager.setState('instagramAuthenticated', true);
      
      this.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
      this.updateStatus('‚úÖ Instagram –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º', 70);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
      try {
        const accountStatus = await this.instagramService.checkAccountStatus(
          this.currentSession,
          this.config!.instagramLogin
        );
        
        if (accountStatus.isBanned) {
          this.status.instagramStatus = 'blocked';
          throw new Error('–ê–∫–∫–∞—É–Ω—Ç Instagram –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.');
        }
        
        if (accountStatus.hasRestrictions) {
          this.log('‚ö†Ô∏è –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ Instagram –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è', 'warning');
          this.healthMonitor.updateHealth(this.healthMonitor.getHealthScore() - 10, 'Instagram account has restrictions');
        }
        
      } catch (statusCheckError: any) {
        this.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞: ${statusCheckError.message}`, 'warning');
      }
      
    } catch (error: any) {
      this.status.instagramStatus = 'error';
      this.healthMonitor.updateHealth(this.healthMonitor.getHealthScore() - 25, `Instagram auth failed: ${error.message}`);
      throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Instagram: ${error.message}`);
    }
  }

  /**
   * üìã –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
   */
  private async initializePublishQueue(): Promise<void> {
    this.updateStatus('üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π...', 75);
    
    try {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
      const validFiles: string[] = [];
      
      for (const filePath of this.config!.mediaFiles) {
        try {
          if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            if (stats.isFile() && stats.size > 0) {
              validFiles.push(filePath);
            } else {
              this.log(`‚ö†Ô∏è –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω: ${filePath}`, 'warning');
            }
          } else {
            this.log(`‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`, 'warning');
          }
        } catch (fileError: any) {
          this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ ${filePath}: ${fileError.message}`, 'error');
        }
      }
      
      if (validFiles.length === 0) {
        throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      }
      
      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
      this.publishQueue = this.shuffleArray([...validFiles]);
      this.status.remainingInQueue = this.publishQueue.length;
      this.status.queueStatus = 'ready';
      this.stateManager.setState('publishQueue', this.publishQueue);
      
      this.log(`üìã –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≥–æ—Ç–æ–≤–∞: ${this.publishQueue.length} —Ñ–∞–π–ª–æ–≤`, 'info');
      this.log(`üìÇ –§–∞–π–ª—ã: ${this.publishQueue.map(f => path.basename(f)).join(', ')}`, 'info');
      this.updateStatus('‚úÖ –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≥–æ—Ç–æ–≤–∞', 85);
      
    } catch (error: any) {
      this.status.queueStatus = 'empty';
      throw new Error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏: ${error.message}`);
    }
  }

  /**
   * üì§ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
   */
  private async startPublishing(): Promise<void> {
    this.updateStatus('üì§ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—É–±–ª–∏–∫–∞—Ü–∏–π...', 90);
    
    try {
      this.status.queueStatus = 'running';
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
      this.monitoringTimer = setInterval(() => {
        this.performHealthCheck();
      }, 30000);
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
      await this.scheduleNextPublish();
      
      this.updateStatus('üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞', 100);
      this.log('üì§ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
      this.log(`‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏: ${this.config!.settings.timeBetweenPosts}—á`, 'info');
      this.log(`üìä –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –¥–µ–Ω—å: ${this.config!.settings.postsPerDay}`, 'info');
      
    } catch (error: any) {
      this.status.queueStatus = 'empty';
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π: ${error.message}`);
    }
  }

  /**
   * üõë –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  async stopAutomation(): Promise<void> {
    this.log('‚èπÔ∏è Pupiter: –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏', 'info');
    
    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
      this.clearAllTimers();
      
      // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      await this.gracefulShutdown();
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AdsPower –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
      if (this.status.adsPowerProfileId && this.status.adsPowerStatus === 'running') {
        try {
          await RetrySystem.executeWithRetry(
            () => this.adsPowerService.stopProfile(this.status.adsPowerProfileId!),
            2,
            1000
          );
          this.status.adsPowerStatus = 'stopped';
          this.log('üî¥ AdsPower –ø—Ä–æ—Ñ–∏–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
        } catch (error: any) {
          this.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å AdsPower –ø—Ä–æ—Ñ–∏–ª—å: ${error.message}`, 'warning');
        }
      }
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      this.resetStatus();
      this.stateManager.clearState();
      
      this.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'success');
      this.emit('automation_stopped');
      
    } catch (error: any) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: ${error.message}`, 'error');
      this.addError(`–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${error.message}`);
    }
  }

  /**
   * ‚è∏Ô∏è –ü–∞—É–∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  async pauseAutomation(): Promise<void> {
    if (!this.status.isRunning) {
      throw new Error('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
    }
    
    this.status.isPaused = true;
    this.status.queueStatus = 'paused';
    
    if (this.publishTimer) {
      clearTimeout(this.publishTimer);
      this.publishTimer = null;
    }
    
    this.log('‚è∏Ô∏è Pupiter: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'info');
    this.updateStatus('–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', this.status.progress);
    this.emit('automation_paused');
  }

  /**
   * ‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  async resumeAutomation(): Promise<void> {
    if (!this.status.isRunning || !this.status.isPaused) {
      throw new Error('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞ –ø–∞—É–∑–µ');
    }
    
    this.status.isPaused = false;
    this.status.queueStatus = 'running';
    
    this.log('‚ñ∂Ô∏è Pupiter: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'info');
    await this.scheduleNextPublish();
    this.emit('automation_resumed');
  }

  /**
   * üîÑ –£–º–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  async restartAutomation(): Promise<void> {
    this.log('üîÑ Pupiter: –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã', 'info');
    
    try {
      const currentConfig = this.config;
      
      await this.stopAutomation();
      await this.sleep(5000); // –ü–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
      
      if (currentConfig) {
        this.retryCount = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        await this.startFullAutomation(currentConfig);
        this.log('‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
      } else {
        throw new Error('–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞');
      }
      
    } catch (error: any) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${error.message}`, 'error');
      throw error;
    }
  }

  /**
   * ‚è∞ –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  private async scheduleNextPublish(): Promise<void> {
    if (!this.status.isRunning || this.status.isPaused || this.publishQueue.length === 0) {
      if (this.publishQueue.length === 0) {
        this.status.queueStatus = 'empty';
        this.log('üì≠ –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', 'info');
        this.emit('queue_empty');
      }
      return;
    }
    
    const interval = this.calculateOptimalPublishInterval();
    
    this.publishTimer = setTimeout(async () => {
      try {
        await this.publishNextVideo();
        await this.scheduleNextPublish(); // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é
      } catch (error) {
        await this.handlePublishError(error as Error);
      }
    }, interval);
    
    const nextTime = new Date(Date.now() + interval);
    this.log(`‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${nextTime.toLocaleString()}`, 'info');
    this.stateManager.setState('nextPublishTime', nextTime);
  }

  /**
   * üìπ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ
   */
  private async publishNextVideo(): Promise<void> {
    if (this.publishQueue.length === 0) {
      this.log('üì≠ –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞', 'warning');
      this.status.queueStatus = 'empty';
      return;
    }
    
    const videoPath = this.publishQueue.shift()!;
    this.status.remainingInQueue = this.publishQueue.length;
    this.stateManager.setState('publishQueue', this.publishQueue);
    
    const fileName = path.basename(videoPath);
    this.log(`üì§ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é: ${fileName}`, 'info');
    this.updateStatus(`üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è: ${fileName}`, this.status.progress);
    
    try {
      if (!this.currentSession) {
        throw new Error('AdsPower —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Å—Å–∏–∏ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
      await this.validateSessionHealth();
      
      const result = await RetrySystem.executeWithRetry(async () => {
        return await this.instagramService.publishVideoToReels(
          this.currentSession!,
          videoPath,
          this.generateSmartCaption(),
          {
            hashtags: this.generateRelevantHashtags()
          }
        );
      }, 2, 10000, 2, (attempt, error) => {
        this.log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ${fileName}: ${error.message}`, 'warning');
      });
      
      if (result.success) {
        this.status.publishedToday++;
        this.status.totalPublished++;
        this.retryCount = 0; // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        this.status.retryCount = 0;
        
        this.log(`‚úÖ –í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${fileName}`, 'success');
        
        if (result.postUrl) {
          this.log(`üîó URL –ø–æ—Å—Ç–∞: ${result.postUrl}`, 'info');
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º health score –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        this.healthMonitor.updateHealth(Math.min(100, this.healthMonitor.getHealthScore() + 5));
        this.emit('video_published', { fileName, url: result.postUrl });
        
      } else {
        throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      }
      
    } catch (error: any) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ${fileName}: ${error.message}`, 'error');
      this.addError(`–ü—É–±–ª–∏–∫–∞—Ü–∏—è ${fileName}: ${error.message}`);
      
      // –ò–Ω—Ç–µ–ª–ª–∏–≥–µ–Ω—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (this.shouldRetryFile(error)) {
        this.publishQueue.push(videoPath); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏
        this.log(`üîÑ –§–∞–π–ª ${fileName} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏`, 'info');
      } else {
        this.log(`‚ùå –§–∞–π–ª ${fileName} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)`, 'error');
      }
      
      this.status.remainingInQueue = this.publishQueue.length;
      this.healthMonitor.updateHealth(Math.max(0, this.healthMonitor.getHealthScore() - 10), `Publication failed: ${error.message}`);
      this.emit('video_failed', { fileName, error: error.message });
    }
    
    this.status.lastActivity = new Date().toISOString();
    this.status.healthScore = this.healthMonitor.getHealthScore();
  }

  /**
   * üè• –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
   */
  private async performHealthCheck(): Promise<void> {
    try {
      const healthIssues: string[] = [];
      let healthScore = 100;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—è
      if (this.status.adsPowerProfileId) {
        try {
          const profileStatus = await this.adsPowerService.checkProfileStatus(this.status.adsPowerProfileId);
          if (!profileStatus.isActive && this.status.adsPowerStatus === 'running') {
            healthIssues.push('AdsPower –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
            healthScore -= 30;
            await this.recoverAdsPowerSession();
          }
        } catch (error: any) {
          healthIssues.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ AdsPower: ${error.message}`);
          healthScore -= 20;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Instagram —Å–µ—Å—Å–∏–∏
      if (this.currentSession && this.status.instagramStatus === 'authenticated') {
        try {
          const accountStatus = await this.instagramService.checkAccountStatus(
            this.currentSession,
            this.config!.instagramLogin
          );
          
          if (!accountStatus.isLoggedIn) {
            healthIssues.push('Instagram —Å–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞');
            healthScore -= 25;
            await this.recoverInstagramSession();
          }
          
          if (accountStatus.isBanned) {
            healthIssues.push('Instagram –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
            healthScore = 0;
            this.status.instagramStatus = 'blocked';
            await this.stopAutomation();
            return;
          }
          
          if (accountStatus.hasRestrictions) {
            healthIssues.push('–ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è');
            healthScore -= 15;
          }
          
        } catch (error: any) {
          healthIssues.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Instagram: ${error.message}`);
          healthScore -= 10;
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
      try {
        const remainingFiles = this.publishQueue.filter(file => fs.existsSync(file));
        if (remainingFiles.length !== this.publishQueue.length) {
          const missingCount = this.publishQueue.length - remainingFiles.length;
          healthIssues.push(`${missingCount} —Ñ–∞–π–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ`);
          healthScore -= missingCount * 5;
          this.publishQueue = remainingFiles;
          this.status.remainingInQueue = remainingFiles.length;
        }
      } catch (error: any) {
        healthIssues.push(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤: ${error.message}`);
        healthScore -= 10;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º health score
      this.healthMonitor.updateHealth(Math.max(0, healthScore));
      this.status.healthScore = this.healthMonitor.getHealthScore();
      
      if (healthIssues.length === 0) {
        this.log('üíö Health check: –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ', 'info');
      } else {
        this.log(`‚ö†Ô∏è Health check: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: ${healthIssues.join(', ')}`, 'warning');
      }
      
      this.emit('health_check', { score: this.status.healthScore, issues: healthIssues });
      
    } catch (error: any) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ health check: ${error.message}`, 'error');
      this.healthMonitor.updateHealth(50, `Health check failed: ${error.message}`);
    }
  }

  /**
   * üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ AdsPower —Å–µ—Å—Å–∏–∏
   */
  private async recoverAdsPowerSession(): Promise<void> {
    try {
      if (!this.status.adsPowerProfileId) return;
      
      this.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ AdsPower —Å–µ—Å—Å–∏–∏...', 'info');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
      await RetrySystem.executeWithRetry(
        () => this.adsPowerService.stopProfile(this.status.adsPowerProfileId!),
        2,
        2000
      );
      
      await this.sleep(3000);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
      const session = await RetrySystem.executeWithRetry(
        () => this.adsPowerService.startProfile(this.status.adsPowerProfileId!),
        3,
        3000
      );
      
      this.currentSession = session;
      this.status.adsPowerStatus = 'running';
      this.stateManager.setState('browserSession', session);
      
      this.log('‚úÖ AdsPower —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'success');
      this.emit('adspower_recovered');
      
    } catch (error: any) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è AdsPower: ${error.message}`, 'error');
      this.addError(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ AdsPower: ${error.message}`);
      this.status.adsPowerStatus = 'error';
    }
  }

  /**
   * üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Instagram —Å–µ—Å—Å–∏–∏
   */
  private async recoverInstagramSession(): Promise<void> {
    try {
      if (!this.currentSession) return;
      
      this.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Instagram —Å–µ—Å—Å–∏–∏...', 'info');
      this.status.instagramStatus = 'connecting';
      
      const loginResult = await RetrySystem.executeWithRetry(async () => {
        return await this.instagramService.loginToInstagram(
          this.currentSession!,
          this.config!.instagramLogin,
          this.config!.instagramPassword,
          { saveSession: true }
        );
      }, 2, 5000);
      
      if (loginResult.success) {
        this.status.instagramStatus = 'authenticated';
        this.stateManager.setState('instagramAuthenticated', true);
        this.log('‚úÖ Instagram —Å–µ—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'success');
        this.emit('instagram_recovered');
      } else {
        throw new Error(loginResult.error || '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Instagram');
      }
      
    } catch (error: any) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Instagram: ${error.message}`, 'error');
      this.status.instagramStatus = 'error';
      this.addError(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Instagram: ${error.message}`);
    }
  }

  /**
   * ‚ö†Ô∏è –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  private async handlePublishError(error: Error): Promise<void> {
    this.retryCount++;
    this.status.retryCount = this.retryCount;
    
    this.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${this.retryCount}/${this.maxRetries}): ${error.message}`, 'warning');
    this.addError(`–ü–æ–ø—ã—Ç–∫–∞ ${this.retryCount}: ${error.message}`);
    
    if (this.retryCount >= this.maxRetries) {
      this.log(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (${this.maxRetries})`, 'error');
      
      if (this.config?.settings.autoRestart) {
        this.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', 'info');
        try {
          await this.restartAutomation();
          return;
        } catch (restartError: any) {
          this.log(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${restartError.message}`, 'error');
        }
      }
      
      this.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫', 'error');
      await this.stopAutomation();
      return;
    }
    
    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    const waitTime = Math.min(this.retryCount * 60000, 300000); // –ú–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç
    this.log(`‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ ${Math.round(waitTime / 1000)}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π`, 'info');
    
    setTimeout(() => {
      if (this.status.isRunning && !this.status.isPaused) {
        this.scheduleNextPublish();
      }
    }, waitTime);
  }

  /**
   * üßÆ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
   */
  private calculateOptimalPublishInterval(): number {
    const settings = this.config!.settings;
    const millisecondsInHour = 60 * 60 * 1000;
    
    if (settings.timeBetweenPosts > 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ ¬±20% –¥–ª—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
      const baseInterval = settings.timeBetweenPosts * millisecondsInHour;
      const randomFactor = 0.8 + (Math.random() * 0.4); // 0.8 - 1.2
      return Math.round(baseInterval * randomFactor);
    } else {
      // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –¥–Ω—é —Å —É—á–µ—Ç–æ–º —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤
      const workingHours = 16; // 8:00 - 00:00
      const interval = (workingHours * millisecondsInHour) / settings.postsPerDay;
      const randomFactor = 0.8 + (Math.random() * 0.4);
      return Math.round(interval * randomFactor);
    }
  }

  /**
   * üìù –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏–π
   */
  private generateSmartCaption(): string {
    const captions = [
      "üî• –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞—Å! üíØ #trending #viral",
      "‚ú® –°–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å! üëÄ #content #amazing",
      "üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–Ω—è üìπ #daily #moments",
      "üí´ –î–µ–ª–∏–º—Å—è –∫—Ä—É—Ç—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º üöÄ #cool #share",
      "üåü –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ –≤–∏–¥–µ–æ! ‚ö° #mustwatch #video",
      "üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ üé≠ #art #creative",
      "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üî• #motivation #inspiration",
      "üéµ –†–∏—Ç–º –∂–∏–∑–Ω–∏ –≤ –¥–≤–∏–∂–µ–Ω–∏–∏ üé∂ #music #life"
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    const hour = new Date().getHours();
    let timeContext = "";
    
    if (hour >= 6 && hour < 12) {
      timeContext = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è ";
    } else if (hour >= 12 && hour < 18) {
      timeContext = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üåû ";
    } else if (hour >= 18 && hour < 22) {
      timeContext = "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåÖ ";
    } else {
      timeContext = "–î–æ–±—Ä–æ–π –Ω–æ—á–∏! üåô ";
    }
    
    const baseCaption = captions[Math.floor(Math.random() * captions.length)];
    return timeContext + baseCaption;
  }

  /**
   * üè∑Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ö–µ—à—Ç–µ–≥–æ–≤
   */
  private generateRelevantHashtags(): string[] {
    const baseHashtags = [
      '#instagram', '#reels', '#content', '#video',
      '#trending', '#viral', '#amazing', '#cool'
    ];
    
    const categoryHashtags = [
      '#entertainment', '#lifestyle', '#creative', '#art',
      '#motivation', '#inspiration', '#daily', '#moments'
    ];
    
    // –í—ã–±–∏—Ä–∞–µ–º 4-6 —Ö–µ—à—Ç–µ–≥–æ–≤ –¥–ª—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
    const selectedBase = this.shuffleArray(baseHashtags).slice(0, 3);
    const selectedCategory = this.shuffleArray(categoryHashtags).slice(0, 2);
    
    return [...selectedBase, ...selectedCategory];
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
   */
  public getStatus(): PupiterStatus {
    return { 
      ...this.status,
      healthScore: this.healthMonitor.getHealthScore()
    };
  }

  /**
   * üßπ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public async cleanup(): Promise<void> {
    this.log('üßπ –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ Pupiter', 'info');
    
    try {
      if (this.status.isRunning) {
        await this.stopAutomation();
      }
      
      this.clearAllTimers();
      this.stateManager.clearState();
      this.removeAllListeners();
      
      this.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
      
    } catch (error: any) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: ${error.message}`, 'error');
    }
  }

  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã

  private clearAllTimers(): void {
    if (this.publishTimer) {
      clearTimeout(this.publishTimer);
      this.publishTimer = null;
    }
    
    if (this.monitoringTimer) {
      clearInterval(this.monitoringTimer);
      this.monitoringTimer = null;
    }
    
    if (this.healthCheckTimer) {
      clearInterval(this.healthCheckTimer);
      this.healthCheckTimer = null;
    }
  }

  private async gracefulShutdown(): Promise<void> {
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    await this.sleep(2000);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    if (this.config) {
      this.stateManager.setState('lastConfig', this.config);
      this.stateManager.setState('shutdownTime', new Date().toISOString());
    }
  }

  private resetStatus(): void {
    this.status = {
      isRunning: false,
      isPaused: false,
      currentTask: '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
      progress: 0,
      adsPowerStatus: 'none',
      instagramStatus: 'not_connected',
      queueStatus: 'empty',
      publishedToday: this.status.publishedToday, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫
      totalPublished: this.status.totalPublished, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫
      remainingInQueue: 0,
      errors: [],
      logs: this.status.logs.slice(-20), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤
      lastActivity: new Date().toISOString(),
      retryCount: 0,
      maxRetries: this.maxRetries,
      healthScore: this.healthMonitor.getHealthScore()
    };
  }

  private shouldRetryFile(error: Error): boolean {
    const fatalErrors = [
      '—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
      '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞',
      '–Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç',
      '–∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω',
      '–ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç'
    ];
    
    return !fatalErrors.some(fatal => 
      error.message.toLowerCase().includes(fatal)
    );
  }

  private async validateSessionHealth(): Promise<void> {
    if (!this.currentSession) {
      throw new Error('–°–µ—Å—Å–∏—è –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Å—Å–∏–∏
    try {
      const profileStatus = await this.adsPowerService.checkProfileStatus(this.status.adsPowerProfileId!);
      if (!profileStatus.isActive) {
        throw new Error('AdsPower –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
      }
    } catch (error: any) {
      throw new Error(`–ü—Ä–æ–±–ª–µ–º–∞ —Å AdsPower —Å–µ—Å—Å–∏–µ–π: ${error.message}`);
    }
  }

  private shuffleArray<T>(array: T[]): T[] {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  private async handleStartupError(error: Error): Promise<void> {
    this.status.isRunning = false;
    this.log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`, 'error');
    this.addError(`–ó–∞–ø—É—Å–∫: ${error.message}`);
    
    // Cleanup —á–∞—Å—Ç–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await this.gracefulShutdown();
    this.resetStatus();
    
    this.emit('startup_failed', error);
  }

  private log(message: string, level: 'info' | 'success' | 'warning' | 'error'): void {
    const timestamp = new Date();
    const logEntry = `[${timestamp.toLocaleTimeString()}] ${message}`;
    
    this.status.logs.push(logEntry);
    this.status.lastActivity = timestamp.toISOString();
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (this.status.logs.length > 100) {
      this.status.logs = this.status.logs.slice(-50);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
    const prefix = {
      'success': '‚úÖ',
      'warning': '‚ö†Ô∏è', 
      'error': '‚ùå',
      'info': '‚ÑπÔ∏è'
    }[level];
    
    console.log(`${prefix} ${logEntry}`);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å logger
    const logMethod = level === 'success' ? 'info' : level;
    logger[logMethod as keyof typeof logger](logEntry);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    this.emit('log', { timestamp, level, message, logEntry });
  }

  private addError(message: string): void {
    const timestamp = new Date();
    const errorEntry = `[${timestamp.toLocaleTimeString()}] ${message}`;
    
    this.status.errors.push(errorEntry);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
    if (this.status.errors.length > 20) {
      this.status.errors = this.status.errors.slice(-10);
    }
    
    this.emit('error_logged', { timestamp, message, errorEntry });
  }

  private updateStatus(task: string, progress: number): void {
    this.status.currentTask = task;
    this.status.progress = Math.max(0, Math.min(100, progress));
    this.status.lastActivity = new Date().toISOString();
    
    this.emit('status_updated', { 
      task, 
      progress: this.status.progress, 
      timestamp: this.status.lastActivity 
    });
  }

  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

export default PupiterService; 