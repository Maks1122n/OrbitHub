import { EventEmitter } from 'events';
import { AdsPowerService, BrowserSession } from './AdsPowerService';
import { InstagramService, InstagramLoginResult, InstagramPublishResult } from './InstagramService';
import { DropboxService } from './DropboxService';
import AdsPowerConfigGenerator from './AdsPowerConfigGenerator';
import logger from '../utils/logger';
import fs from 'fs';
import path from 'path';

// –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Pupiter
export interface PupiterConfig {
  instagramLogin: string;
  instagramPassword: string;
  profileName: string;
  mediaFiles: string[];
  settings: {
    postsPerDay: number;
    timeBetweenPosts: number;
    autoRestart: boolean;
    useProxy: boolean;
  };
}

export interface PupiterStatus {
  isRunning: boolean;
  isPaused: boolean;
  currentTask: string;
  progress: number;
  adsPowerProfileId?: string;
  adsPowerStatus: 'none' | 'creating' | 'created' | 'running' | 'stopped' | 'error';
  instagramStatus: 'not_connected' | 'connecting' | 'authenticated' | 'error' | 'blocked';
  queueStatus: 'empty' | 'ready' | 'running' | 'paused';
  publishedToday: number;
  totalPublished: number;
  remainingInQueue: number;
  errors: string[];
  logs: string[];
  lastActivity: Date;
}

export interface PupiterLog {
  timestamp: Date;
  level: 'info' | 'success' | 'warning' | 'error';
  message: string;
  details?: any;
}

/**
 * üéÆ PUPITER - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—É–ª—å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Instagram –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—è–º–∏
 * - –ö–æ–Ω—Ç—Ä–æ–ª—å Instagram —Å–µ—Å—Å–∏–π  
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö
 */
export class PupiterService extends EventEmitter {
  private status: PupiterStatus;
  private config: PupiterConfig | null = null;
  private adsPowerService: AdsPowerService;
  private instagramService: InstagramService;
  private dropboxService: DropboxService;
  private currentSession: BrowserSession | null = null;
  private publishQueue: string[] = [];
  private publishTimer: NodeJS.Timeout | null = null;
  private monitoringTimer: NodeJS.Timeout | null = null;
  private maxRetries = 3;
  private retryCount = 0;

  constructor() {
    super();
    this.adsPowerService = new AdsPowerService();
    this.instagramService = new InstagramService();
    this.dropboxService = new DropboxService();
    
    this.status = {
      isRunning: false,
      isPaused: false,
      currentTask: '–ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É',
      progress: 0,
      adsPowerStatus: 'none',
      instagramStatus: 'not_connected',
      queueStatus: 'empty',
      publishedToday: 0,
      totalPublished: 0,
      remainingInQueue: 0,
      errors: [],
      logs: [],
      lastActivity: new Date()
    };

    this.log('üéÆ Pupiter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 'info');
  }

  /**
   * üöÄ –ì–õ–ê–í–ù–ê–Ø –ö–û–ú–ê–ù–î–ê: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  async startFullAutomation(config: PupiterConfig): Promise<{ success: boolean; message: string }> {
    if (this.status.isRunning) {
      throw new Error('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞');
    }

    try {
      this.config = config;
      this.status.isRunning = true;
      this.status.isPaused = false;
      this.retryCount = 0;

      this.log('üöÄ Pupiter: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Instagram', 'info');
      
      // –≠—Ç–∞–ø 1: –°–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã (0-10%)
      await this.performSystemDiagnostics();
      
      // –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ AdsPower –ø—Ä–æ—Ñ–∏–ª—è (10-40%)
      await this.setupAdsPowerProfile();
      
      // –≠—Ç–∞–ø 3: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram (40-60%)
      await this.authenticateInstagram();
      
      // –≠—Ç–∞–ø 4: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (60-80%)
      await this.initializePublishQueue();
      
      // –≠—Ç–∞–ø 5: –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (80-100%)
      await this.startPublishing();
      
      this.updateStatus('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 100);
      this.log('üéØ Pupiter –≥–æ—Ç–æ–≤ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–±–æ—Ç–µ', 'success');
      
      return { success: true, message: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' };
      
    } catch (error: any) {
      this.status.isRunning = false;
      this.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
      await this.handleCriticalError(error);
      throw error;
    }
  }

  /**
   * üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  async stopAutomation(): Promise<void> {
    this.log('‚èπÔ∏è Pupiter: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É', 'info');
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    if (this.publishTimer) {
      clearTimeout(this.publishTimer);
      this.publishTimer = null;
    }
    
    if (this.monitoringTimer) {
      clearInterval(this.monitoringTimer);
      this.monitoringTimer = null;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AdsPower –ø—Ä–æ—Ñ–∏–ª—å
    if (this.status.adsPowerProfileId && this.status.adsPowerStatus === 'running') {
      try {
        await this.adsPowerService.stopProfile(this.status.adsPowerProfileId);
        this.status.adsPowerStatus = 'stopped';
        this.log('üî¥ AdsPower –ø—Ä–æ—Ñ–∏–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'info');
      } catch (error) {
        this.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ AdsPower –ø—Ä–æ—Ñ–∏–ª—è', 'warning');
      }
    }
    
    this.status.isRunning = false;
    this.status.isPaused = false;
    this.status.instagramStatus = 'not_connected';
    this.status.queueStatus = 'empty';
    this.updateStatus('–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 0);
    
    this.emit('stopped');
  }

  /**
   * ‚è∏Ô∏è –ü–∞—É–∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  async pauseAutomation(): Promise<void> {
    if (!this.status.isRunning) {
      throw new Error('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞');
    }
    
    this.status.isPaused = true;
    this.status.queueStatus = 'paused';
    
    if (this.publishTimer) {
      clearTimeout(this.publishTimer);
      this.publishTimer = null;
    }
    
    this.log('‚è∏Ô∏è Pupiter: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'info');
    this.updateStatus('–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', this.status.progress);
    
    this.emit('paused');
  }

  /**
   * ‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  async resumeAutomation(): Promise<void> {
    if (!this.status.isRunning || !this.status.isPaused) {
      throw new Error('–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞ –ø–∞—É–∑–µ');
    }
    
    this.status.isPaused = false;
    this.status.queueStatus = 'running';
    
    this.log('‚ñ∂Ô∏è Pupiter: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'info');
    await this.scheduleNextPublish();
    
    this.emit('resumed');
  }

  /**
   * üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  async restartAutomation(): Promise<void> {
    this.log('üîÑ Pupiter: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã', 'info');
    
    await this.stopAutomation();
    await this.sleep(5000); // –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥
    
    if (this.config) {
      await this.startFullAutomation(this.config);
    }
  }

  /**
   * üîß –°–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
   */
  private async performSystemDiagnostics(): Promise<void> {
    this.updateStatus('üîß –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã...', 5);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ AdsPower
    const adsPowerConnected = await this.adsPowerService.checkConnection();
    if (!adsPowerConnected) {
      throw new Error('AdsPower –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://local.adspower.net:50325');
    }
    this.log('‚úÖ AdsPower API –ø–æ–¥–∫–ª—é—á–µ–Ω', 'success');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (!this.config?.mediaFiles || this.config.mediaFiles.length === 0) {
      throw new Error('–ù–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    }
    this.log(`‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤: ${this.config.mediaFiles.length} —Ñ–∞–π–ª–æ–≤`, 'success');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Instagram –¥–∞–Ω–Ω—ã—Ö
    if (!this.config?.instagramLogin || !this.config?.instagramPassword) {
      throw new Error('–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞');
    }
    this.log('‚úÖ –î–∞–Ω–Ω—ã–µ Instagram –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã', 'success');
    
    this.updateStatus('‚úÖ –°–∞–º–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 10);
  }

  /**
   * üñ•Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ AdsPower –ø—Ä–æ—Ñ–∏–ª—è
   */
  private async setupAdsPowerProfile(): Promise<void> {
    this.updateStatus('üñ•Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—è...', 20);
    this.status.adsPowerStatus = 'creating';
    
    try {
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const profileConfig = AdsPowerConfigGenerator.generateOptimalConfig(
        this.config!.instagramLogin,
        this.config!.profileName
      );
      
      this.log('üß† –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è', 'info');
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const result = await this.adsPowerService.createInstagramProfile({
        login: this.config!.instagramLogin,
        password: this.config!.instagramPassword,
        profileName: this.config!.profileName
      });
      
      this.status.adsPowerProfileId = result.profileId;
      this.status.adsPowerStatus = 'created';
      this.log(`‚úÖ AdsPower –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ID ${result.profileId}`, 'success');
      
      this.updateStatus('üöÄ –ó–∞–ø—É—Å–∫ AdsPower –ø—Ä–æ—Ñ–∏–ª—è...', 30);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const session = await this.adsPowerService.startProfile(result.profileId);
      this.currentSession = session;
      this.status.adsPowerStatus = 'running';
      
      this.log('üöÄ AdsPower –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
      this.updateStatus('‚úÖ AdsPower –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ', 40);
      
    } catch (error: any) {
      this.status.adsPowerStatus = 'error';
      throw new Error(`–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AdsPower: ${error.message}`);
    }
  }

  /**
   * üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram
   */
  private async authenticateInstagram(): Promise<void> {
    this.updateStatus('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram...', 50);
    this.status.instagramStatus = 'connecting';
    
    if (!this.currentSession) {
      throw new Error('AdsPower —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
    }
    
    try {
      const loginResult = await this.instagramService.loginToInstagram(
        this.currentSession,
        this.config!.instagramLogin,
        this.config!.instagramPassword,
        { saveSession: true, skipIfLoggedIn: true }
      );
      
      if (!loginResult.success) {
        if (loginResult.requiresVerification) {
          this.status.instagramStatus = 'error';
          throw new Error(`Instagram —Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é: ${loginResult.challengeType}`);
        }
        throw new Error(loginResult.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Instagram');
      }
      
      this.status.instagramStatus = 'authenticated';
      this.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Instagram –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
      this.updateStatus('‚úÖ Instagram –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º', 60);
      
    } catch (error: any) {
      this.status.instagramStatus = 'error';
      throw new Error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Instagram: ${error.message}`);
    }
  }

  /**
   * üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
   */
  private async initializePublishQueue(): Promise<void> {
    this.updateStatus('üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π...', 70);
    
    this.publishQueue = [...this.config!.mediaFiles];
    this.status.remainingInQueue = this.publishQueue.length;
    this.status.queueStatus = 'ready';
    
    this.log(`üìã –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≥–æ—Ç–æ–≤–∞: ${this.publishQueue.length} —Ñ–∞–π–ª–æ–≤`, 'info');
    this.updateStatus('‚úÖ –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 80);
  }

  /**
   * üì§ –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
   */
  private async startPublishing(): Promise<void> {
    this.updateStatus('üì§ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π...', 90);
    
    this.status.queueStatus = 'running';
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    this.monitoringTimer = setInterval(() => {
      this.performSystemMonitoring();
    }, 30000);
    
    // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
    await this.scheduleNextPublish();
    
    this.updateStatus('üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã', 100);
    this.log('üì§ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∑–∞–ø—É—â–µ–Ω–∞', 'success');
  }

  /**
   * ‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  private async scheduleNextPublish(): Promise<void> {
    if (!this.status.isRunning || this.status.isPaused || this.publishQueue.length === 0) {
      return;
    }
    
    const interval = this.calculatePublishInterval();
    
    this.publishTimer = setTimeout(async () => {
      try {
        await this.publishNextVideo();
        await this.scheduleNextPublish(); // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é
      } catch (error) {
        await this.handlePublishError(error as Error);
      }
    }, interval);
    
    const nextTime = new Date(Date.now() + interval);
    this.log(`‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ ${nextTime.toLocaleTimeString()}`, 'info');
  }

  /**
   * üìπ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ
   */
  private async publishNextVideo(): Promise<void> {
    if (this.publishQueue.length === 0) {
      this.log('üì≠ –û—á–µ—Ä–µ–¥—å –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø—É—Å—Ç–∞', 'warning');
      this.status.queueStatus = 'empty';
      return;
    }
    
    const videoPath = this.publishQueue.shift()!;
    this.status.remainingInQueue = this.publishQueue.length;
    
    const fileName = path.basename(videoPath);
    this.log(`üì§ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é: ${fileName}`, 'info');
    
    try {
      if (!this.currentSession) {
        throw new Error('AdsPower —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
      }
      
      const result = await this.instagramService.publishVideoToReels(
        this.currentSession,
        videoPath,
        this.generateCaption(),
        {
          hashtags: this.config?.settings ? [] : undefined // –î–æ–±–∞–≤–∏–º —Ö–µ—à—Ç–µ–≥–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        }
      );
      
      if (result.success) {
        this.status.publishedToday++;
        this.status.totalPublished++;
        this.log(`‚úÖ –í–∏–¥–µ–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${fileName}`, 'success');
        
        if (result.postUrl) {
          this.log(`üîó URL –ø–æ—Å—Ç–∞: ${result.postUrl}`, 'info');
        }
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
      }
      
    } catch (error: any) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ${fileName}: ${error.message}`, 'error');
      this.addError(`–ü—É–±–ª–∏–∫–∞—Ü–∏—è ${fileName}: ${error.message}`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
      this.publishQueue.push(videoPath);
      this.status.remainingInQueue = this.publishQueue.length;
    }
    
    this.status.lastActivity = new Date();
  }

  /**
   * üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
   */
  private async performSystemMonitoring(): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—è
      if (this.status.adsPowerProfileId) {
        const profileStatus = await this.adsPowerService.checkProfileStatus(this.status.adsPowerProfileId);
        if (!profileStatus.isActive && this.status.adsPowerStatus === 'running') {
          this.log('‚ö†Ô∏è AdsPower –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', 'warning');
          await this.recoverAdsPowerSession();
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Instagram —Å–µ—Å—Å–∏–∏
      if (this.currentSession && this.status.instagramStatus === 'authenticated') {
        const accountStatus = await this.instagramService.checkAccountStatus(
          this.currentSession,
          this.config!.instagramLogin
        );
        
        if (!accountStatus.isLoggedIn) {
          this.log('‚ö†Ô∏è Instagram —Å–µ—Å—Å–∏—è –ø–æ—Ç–µ—Ä—è–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', 'warning');
          await this.recoverInstagramSession();
        }
        
        if (accountStatus.isBanned) {
          this.log('üö´ Instagram –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!', 'error');
          this.status.instagramStatus = 'blocked';
          await this.stopAutomation();
        }
      }
      
      this.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã: –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –Ω–æ—Ä–º–µ', 'info');
      
    } catch (error: any) {
      this.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`, 'warning');
    }
  }

  /**
   * üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ AdsPower —Å–µ—Å—Å–∏–∏
   */
  private async recoverAdsPowerSession(): Promise<void> {
    try {
      if (!this.status.adsPowerProfileId) return;
      
      this.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ AdsPower —Å–µ—Å—Å–∏–∏...', 'info');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é
      await this.adsPowerService.stopProfile(this.status.adsPowerProfileId);
      await this.sleep(3000);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
      const session = await this.adsPowerService.startProfile(this.status.adsPowerProfileId);
      this.currentSession = session;
      this.status.adsPowerStatus = 'running';
      
      this.log('‚úÖ AdsPower —Å–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'success');
      
    } catch (error: any) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è AdsPower: ${error.message}`, 'error');
      this.addError(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ AdsPower: ${error.message}`);
    }
  }

  /**
   * üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Instagram —Å–µ—Å—Å–∏–∏
   */
  private async recoverInstagramSession(): Promise<void> {
    try {
      if (!this.currentSession) return;
      
      this.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Instagram —Å–µ—Å—Å–∏–∏...', 'info');
      this.status.instagramStatus = 'connecting';
      
      const loginResult = await this.instagramService.loginToInstagram(
        this.currentSession,
        this.config!.instagramLogin,
        this.config!.instagramPassword,
        { saveSession: true }
      );
      
      if (loginResult.success) {
        this.status.instagramStatus = 'authenticated';
        this.log('‚úÖ Instagram —Å–µ—Å—Å–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞', 'success');
      } else {
        throw new Error(loginResult.error || '–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Instagram');
      }
      
    } catch (error: any) {
      this.log(`‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è Instagram: ${error.message}`, 'error');
      this.status.instagramStatus = 'error';
      this.addError(`–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Instagram: ${error.message}`);
    }
  }

  /**
   * ‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  private async handlePublishError(error: Error): Promise<void> {
    this.retryCount++;
    
    if (this.retryCount >= this.maxRetries) {
      this.log(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (${this.maxRetries})`, 'error');
      
      if (this.config?.settings.autoRestart) {
        this.log('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–∫–ª—é—á–µ–Ω', 'info');
        await this.restartAutomation();
      } else {
        await this.stopAutomation();
      }
      return;
    }
    
    this.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${this.retryCount}/${this.maxRetries}): ${error.message}`, 'warning');
    
    // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    const waitTime = this.retryCount * 60000; // 1, 2, 3 –º–∏–Ω—É—Ç—ã
    setTimeout(() => {
      this.scheduleNextPublish();
    }, waitTime);
  }

  /**
   * üÜò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
   */
  private async handleCriticalError(error: Error): Promise<void> {
    this.log(`üÜò –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    this.addError(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    await this.stopAutomation();
    
    this.emit('critical_error', error);
  }

  /**
   * üßÆ –†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏
   */
  private calculatePublishInterval(): number {
    const settings = this.config!.settings;
    const hoursInDay = 24;
    const millisecondsInHour = 60 * 60 * 1000;
    
    if (settings.timeBetweenPosts > 0) {
      return settings.timeBetweenPosts * millisecondsInHour;
    } else {
      // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –¥–Ω—é
      return Math.floor((hoursInDay * millisecondsInHour) / settings.postsPerDay);
    }
  }

  /**
   * üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞
   */
  private generateCaption(): string {
    // –ë–∞–∑–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è Instagram Reels
    const captions = [
      "üî• –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∞—Å! üíØ",
      "‚ú® –°–º–æ—Ç—Ä–∏—Ç–µ —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å! üëÄ",
      "üéØ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –º–æ–º–µ–Ω—Ç –¥–Ω—è üìπ",
      "üí´ –î–µ–ª–∏–º—Å—è –∫—Ä—É—Ç—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º üöÄ",
      "üåü –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ –≤–∏–¥–µ–æ! ‚ö°"
    ];
    
    return captions[Math.floor(Math.random() * captions.length)];
  }

  /**
   * üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
   */
  public getStatus(): PupiterStatus {
    return { ...this.status };
  }

  /**
   * üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  private log(message: string, level: 'info' | 'success' | 'warning' | 'error'): void {
    const timestamp = new Date();
    const logEntry = `[${timestamp.toLocaleTimeString()}] ${message}`;
    
    this.status.logs.push(logEntry);
    this.status.lastActivity = timestamp;
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
    if (this.status.logs.length > 100) {
      this.status.logs = this.status.logs.slice(-50);
    }
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Ñ–∞–π–ª
    switch (level) {
      case 'success':
        console.log(`‚úÖ ${logEntry}`);
        logger.info(logEntry);
        break;
      case 'warning':
        console.warn(`‚ö†Ô∏è ${logEntry}`);
        logger.warn(logEntry);
        break;
      case 'error':
        console.error(`‚ùå ${logEntry}`);
        logger.error(logEntry);
        break;
      default:
        console.log(`‚ÑπÔ∏è ${logEntry}`);
        logger.info(logEntry);
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    this.emit('log', { timestamp, level, message });
  }

  /**
   * ‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
   */
  private addError(message: string): void {
    const timestamp = new Date();
    const errorEntry = `[${timestamp.toLocaleTimeString()}] ${message}`;
    
    this.status.errors.push(errorEntry);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
    if (this.status.errors.length > 20) {
      this.status.errors = this.status.errors.slice(-10);
    }
    
    this.emit('error', { timestamp, message });
  }

  /**
   * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
   */
  private updateStatus(task: string, progress: number): void {
    this.status.currentTask = task;
    this.status.progress = progress;
    this.status.lastActivity = new Date();
    
    this.emit('status_update', { task, progress });
  }

  /**
   * üò¥ –ü–∞—É–∑–∞
   */
  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
   */
  public async cleanup(): Promise<void> {
    this.log('üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ Pupiter', 'info');
    
    if (this.status.isRunning) {
      await this.stopAutomation();
    }
    
    this.removeAllListeners();
  }
}

export default PupiterService; 