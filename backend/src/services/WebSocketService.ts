import { Server as HttpServer } from 'http';
import { Server as SocketIOServer, Socket } from 'socket.io';
import { verifyAccessToken } from '../utils/jwt';
import { AutomationService } from './AutomationService';
import logger from '../utils/logger';

interface AuthenticatedSocket extends Socket {
  userId?: string;
  userEmail?: string;
  userRole?: string;
}

interface WebSocketMessage {
  type: string;
  data: any;
  timestamp: Date;
  userId?: string;
}

/**
 * üîÑ WebSocketService - Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è OrbitHub
 * 
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:
 * - –°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
 * - –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
 * - –û—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Dashboard –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * - –°—Ç–∞—Ç—É—Å—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤
 */
export class WebSocketService {
  private io: SocketIOServer;
  private connectedUsers: Map<string, Set<string>> = new Map(); // userId -> socketIds
  private automationService: AutomationService;

  constructor(httpServer: HttpServer) {
    this.io = new SocketIOServer(httpServer, {
      cors: {
        origin: process.env.NODE_ENV === 'production' 
          ? ['https://orbithub.onrender.com', 'https://orbithub-frontend.onrender.com']
          : ['http://localhost:3000', 'http://localhost:5000'],
        methods: ['GET', 'POST'],
        credentials: true
      },
      transports: ['websocket', 'polling']
    });

    this.automationService = AutomationService.getInstance();
    this.setupMiddleware();
    this.setupEventHandlers();
    this.setupAutomationListeners();

    logger.info('üîÑ WebSocketService initialized successfully');
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private setupMiddleware(): void {
    this.io.use(async (socket: AuthenticatedSocket, next) => {
      try {
        const token = socket.handshake.auth.token || socket.handshake.headers.authorization?.replace('Bearer ', '');
        
        if (!token) {
          return next(new Error('Authentication token required'));
        }

        const decoded = verifyAccessToken(token);
        socket.userId = decoded.userId;
        socket.userEmail = decoded.email;
        socket.userRole = decoded.role;

        logger.debug(`üîÑ WebSocket user authenticated: ${decoded.email}`);
        next();
      } catch (error: any) {
        logger.warn(`üîÑ WebSocket authentication failed: ${error.message}`);
        next(new Error('Authentication failed'));
      }
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö event handlers
   */
  private setupEventHandlers(): void {
    this.io.on('connection', (socket: AuthenticatedSocket) => {
      const userId = socket.userId!;
      
      logger.info(`üîÑ WebSocket connected: ${socket.userEmail} (${socket.id})`);

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö
      if (!this.connectedUsers.has(userId)) {
        this.connectedUsers.set(userId, new Set());
      }
      this.connectedUsers.get(userId)!.add(socket.id);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      this.sendCurrentStatus(socket);

      // === CLIENT EVENT HANDLERS === //

      /**
       * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
       */
      socket.on('subscribe:automation', () => {
        socket.join(`automation:${userId}`);
        this.sendAutomationStatus(userId);
        logger.debug(`üîÑ User ${userId} subscribed to automation updates`);
      });

      /**
       * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Dashboard
       */
      socket.on('subscribe:dashboard', () => {
        socket.join(`dashboard:${userId}`);
        this.sendDashboardStats(userId);
        logger.debug(`üîÑ User ${userId} subscribed to dashboard updates`);
      });

      /**
       * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤
       */
      socket.on('subscribe:accounts', () => {
        socket.join(`accounts:${userId}`);
        this.sendAccountsStatus(userId);
        logger.debug(`üîÑ User ${userId} subscribed to accounts updates`);
      });

      /**
       * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤
       */
      socket.on('subscribe:posts', () => {
        socket.join(`posts:${userId}`);
        this.sendPostsStatus(userId);
        logger.debug(`üîÑ User ${userId} subscribed to posts updates`);
      });

      /**
       * –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
       */
      socket.on('request:status', () => {
        this.sendCurrentStatus(socket);
      });

      /**
       * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
       */
      socket.on('unsubscribe:all', () => {
        socket.leaveAll();
        logger.debug(`üîÑ User ${userId} unsubscribed from all updates`);
      });

      /**
       * Heartbeat –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
       */
      socket.on('ping', () => {
        socket.emit('pong', { timestamp: new Date().toISOString() });
      });

      // === DISCONNECTION HANDLER === //

      socket.on('disconnect', (reason) => {
        logger.info(`üîÑ WebSocket disconnected: ${socket.userEmail} (${reason})`);
        
        // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö
        const userSockets = this.connectedUsers.get(userId);
        if (userSockets) {
          userSockets.delete(socket.id);
          if (userSockets.size === 0) {
            this.connectedUsers.delete(userId);
          }
        }
      });

      // === ERROR HANDLER === //

      socket.on('error', (error) => {
        logger.error(`üîÑ WebSocket error for user ${userId}:`, error);
      });
    });
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ listeners –¥–ª—è AutomationService
   */
  private setupAutomationListeners(): void {
    // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    this.automationService.on('automationStarted', (data) => {
      this.broadcastToUser(data.userId, 'automation:started', {
        sessionId: data.sessionId,
        accountIds: data.accountIds,
        timestamp: new Date().toISOString()
      });
      
      this.sendAutomationStatus(data.userId);
      this.sendDashboardStats(data.userId);
    });

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    this.automationService.on('automationStopped', (data) => {
      this.broadcastToUser(data.userId, 'automation:stopped', {
        sessionId: data.sessionId,
        tasksCompleted: data.tasksCompleted,
        tasksFailed: data.tasksFailed,
        timestamp: new Date().toISOString()
      });
      
      this.sendAutomationStatus(data.userId);
      this.sendDashboardStats(data.userId);
    });

    // –ü–∞—É–∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    this.automationService.on('automationPaused', (data) => {
      this.broadcastToUser(data.userId, 'automation:paused', {
        sessionId: data.sessionId,
        timestamp: new Date().toISOString()
      });
      
      this.sendAutomationStatus(data.userId);
    });

    // –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
    this.automationService.on('automationResumed', (data) => {
      this.broadcastToUser(data.userId, 'automation:resumed', {
        sessionId: data.sessionId,
        timestamp: new Date().toISOString()
      });
      
      this.sendAutomationStatus(data.userId);
    });

    // –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞
    this.automationService.on('postPublished', (data) => {
      this.broadcastToUser(data.userId, 'post:published', {
        postId: data.postId,
        accountId: data.accountId,
        success: data.success,
        error: data.error,
        instagramUrl: data.instagramUrl,
        timestamp: new Date().toISOString()
      });
      
      this.sendPostsStatus(data.userId);
      this.sendDashboardStats(data.userId);
    });

    // –û—à–∏–±–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
    this.automationService.on('accountError', (data) => {
      this.broadcastToUser(data.userId, 'account:error', {
        accountId: data.accountId,
        error: data.error,
        timestamp: new Date().toISOString()
      });
      
      this.sendAccountsStatus(data.userId);
    });

    // –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    this.automationService.on('emergencyStop', (data) => {
      this.broadcastToUser(data.userId, 'automation:emergency_stop', {
        stoppedAccounts: data.stoppedAccounts,
        cancelledTasks: data.cancelledTasks,
        timestamp: new Date().toISOString()
      });
      
      this.sendAutomationStatus(data.userId);
      this.sendDashboardStats(data.userId);
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    this.automationService.on('statsUpdate', (stats) => {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
      this.connectedUsers.forEach((sockets, userId) => {
        this.sendAutomationStatus(userId);
      });
    });

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
    this.automationService.on('healthWarning', (health) => {
      this.io.emit('system:health_warning', {
        issues: health.issues,
        metrics: health.metrics,
        timestamp: new Date().toISOString()
      });
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
   */
  private async sendCurrentStatus(socket: AuthenticatedSocket): Promise<void> {
    const userId = socket.userId!;
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
      const status = {
        user: {
          id: userId,
          email: socket.userEmail,
          role: socket.userRole
        },
        automation: this.automationService.getStatus(),
        health: this.automationService.getHealthStatus(),
        timestamp: new Date().toISOString()
      };

      socket.emit('status:current', status);
    } catch (error: any) {
      logger.error(`üîÑ Error sending current status to user ${userId}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  private async sendAutomationStatus(userId: string): Promise<void> {
    try {
      const status = this.automationService.getStatus();
      
      this.io.to(`automation:${userId}`).emit('automation:status', {
        ...status,
        timestamp: new Date().toISOString()
      });
    } catch (error: any) {
      logger.error(`üîÑ Error sending automation status to user ${userId}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ Dashboard
   */
  private async sendDashboardStats(userId: string): Promise<void> {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å DashboardController –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      // –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      const stats = {
        automation: this.automationService.getStatus(),
        health: this.automationService.getHealthStatus(),
        timestamp: new Date().toISOString()
      };

      this.io.to(`dashboard:${userId}`).emit('dashboard:stats', stats);
    } catch (error: any) {
      logger.error(`üîÑ Error sending dashboard stats to user ${userId}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
   */
  private async sendAccountsStatus(userId: string): Promise<void> {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AccountController –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      const accountsStatus = {
        updated: new Date().toISOString()
      };

      this.io.to(`accounts:${userId}`).emit('accounts:status', accountsStatus);
    } catch (error: any) {
      logger.error(`üîÑ Error sending accounts status to user ${userId}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–æ–≤
   */
  private async sendPostsStatus(userId: string): Promise<void> {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å PostsController –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–æ–≤
      const postsStatus = {
        updated: new Date().toISOString()
      };

      this.io.to(`posts:${userId}`).emit('posts:status', postsStatus);
    } catch (error: any) {
      logger.error(`üîÑ Error sending posts status to user ${userId}:`, error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  public broadcastToUser(userId: string, event: string, data: any): void {
    const userSockets = this.connectedUsers.get(userId);
    if (userSockets && userSockets.size > 0) {
      userSockets.forEach(socketId => {
        this.io.to(socketId).emit(event, data);
      });
      
      logger.debug(`üîÑ Broadcasted ${event} to user ${userId} (${userSockets.size} sockets)`);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
   */
  public broadcastToAll(event: string, data: any): void {
    this.io.emit(event, data);
    logger.debug(`üîÑ Broadcasted ${event} to all users`);
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  public sendNotification(userId: string, notification: {
    type: 'info' | 'success' | 'warning' | 'error';
    title: string;
    message: string;
    metadata?: any;
  }): void {
    this.broadcastToUser(userId, 'notification', {
      ...notification,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  public getConnectedUsersCount(): number {
    return this.connectedUsers.size;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
   */
  public getConnectionStats(): {
    connectedUsers: number;
    totalSockets: number;
    roomsCount: number;
    avgSocketsPerUser: number;
  } {
    const totalSockets = Array.from(this.connectedUsers.values())
      .reduce((total, sockets) => total + sockets.size, 0);
    
    const roomsCount = this.io.sockets.adapter.rooms.size;
    const avgSocketsPerUser = this.connectedUsers.size > 0 
      ? totalSockets / this.connectedUsers.size 
      : 0;

    return {
      connectedUsers: this.connectedUsers.size,
      totalSockets,
      roomsCount,
      avgSocketsPerUser: Math.round(avgSocketsPerUser * 100) / 100
    };
  }

  /**
   * Graceful shutdown WebSocket —Å–µ—Ä–≤–µ—Ä–∞
   */
  public async shutdown(): Promise<void> {
    logger.info('üîÑ WebSocketService shutting down...');
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ shutdown
    this.broadcastToAll('system:shutdown', {
      message: 'Server is shutting down for maintenance',
      timestamp: new Date().toISOString()
    });

    // –î–∞–µ–º –≤—Ä–µ–º—è –∫–ª–∏–µ–Ω—Ç–∞–º –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    this.io.close();
    
    logger.info('‚úÖ WebSocketService shutdown completed');
  }
}

export default WebSocketService; 