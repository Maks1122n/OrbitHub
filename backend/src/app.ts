import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import { createServer } from 'http';
import { Server } from 'socket.io';

// –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —É—Ç–∏–ª–∏—Ç
import { config } from './config/env';
import { connectDatabase } from './config/database';
import logger from './utils/logger';
import { createDefaultAdmin } from './utils/createAdmin';

// –ò–º–ø–æ—Ä—Ç—ã middleware
import { 
  errorHandler, 
  notFoundHandler, 
  handleUncaughtException,
  handleUnhandledRejection,
  handleGracefulShutdown 
} from './middleware/errorHandler';
import { logUserActivity } from './middleware/auth';

// –ò–º–ø–æ—Ä—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤
import apiRoutes from './routes';
import authRoutes from './routes/auth';

// –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
import { AutomationService } from './services/AutomationService';

class App {
  public app: express.Application;
  private server: any;
  private io: Server;
  private automationService: AutomationService;

  constructor() {
    this.app = express();
    this.automationService = new AutomationService();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    this.initializeErrorHandlers();
    this.initializeMiddlewares();
    this.initializeRoutes();
    this.initializeErrorMiddleware();
    this.createServer();
  }

  private initializeErrorHandlers(): void {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    handleUncaughtException();
    handleUnhandledRejection();
  }

  private initializeMiddlewares(): void {
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    this.app.use(helmet({
      contentSecurityPolicy: false, // –û—Ç–∫–ª—é—á–∞–µ–º CSP –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    }));

    // CORS
    this.app.use(cors({
      origin: config.nodeEnv === 'production' 
        ? ['https://yourdomain.com'] // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –¥–æ–º–µ–Ω
        : ['http://localhost:3000', 'http://localhost:5173'], // React dev server
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization']
    }));

    // –ü–∞—Ä—Å–∏–Ω–≥ JSON
    this.app.use(express.json({ limit: '10mb' }));
    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }));

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
    if (config.nodeEnv === 'development') {
      this.app.use(morgan('dev'));
    } else {
      this.app.use(morgan('combined', {
        stream: {
          write: (message: string) => {
            logger.info(message.trim());
          }
        }
      }));
    }

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.app.use(logUserActivity);

    // –î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ IP)
    this.app.set('trust proxy', 1);
  }

  private initializeRoutes(): void {
    // Auth –º–∞—Ä—à—Ä—É—Ç—ã
    this.app.use('/api/auth', authRoutes);
    
    // API –º–∞—Ä—à—Ä—É—Ç—ã
    this.app.use('/api', apiRoutes);

    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    this.app.use('/uploads', express.static('uploads'));

    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API
    this.app.get('/', (req, res) => {
      res.json({
        success: true,
        message: 'OrbitHub Server is running!',
        version: '1.0.0',
        environment: config.nodeEnv,
        timestamp: new Date().toISOString(),
        documentation: '/api'
      });
    });
  }

  private initializeErrorMiddleware(): void {
    // 404 –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
    this.app.use(notFoundHandler);

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    this.app.use(errorHandler);
  }

  private createServer(): void {
    // –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
    this.server = createServer(this.app);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Socket.IO –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    this.io = new Server(this.server, {
      cors: {
        origin: config.nodeEnv === 'production' 
          ? ['https://yourdomain.com']
          : ['http://localhost:3000', 'http://localhost:5173'],
        methods: ['GET', 'POST'],
        credentials: true
      }
    });

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Socket.IO —Å–æ–±—ã—Ç–∏—è
    this.initializeSocketIO();
  }

  private initializeSocketIO(): void {
    this.io.on('connection', (socket) => {
      logger.info(`Client connected: ${socket.id}`);

      // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      socket.on('join-user', (userId: string) => {
        socket.join(`user-${userId}`);
        logger.info(`User ${userId} joined room`);
      });

      // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
      socket.on('disconnect', () => {
        logger.info(`Client disconnected: ${socket.id}`);
      });
    });

    // –î–µ–ª–∞–µ–º io –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    global.io = this.io;
  }

  public async start(): Promise<void> {
    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await connectDatabase();

      // –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      await createDefaultAdmin();

      // –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
      await this.createDirectories();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
      this.automationService.start();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
      this.server.listen(config.port, () => {
        logger.info(`üöÄ Server running on port ${config.port}`);
        logger.info(`üìç Environment: ${config.nodeEnv}`);
        logger.info(`üåê API URL: http://localhost:${config.port}/api`);
        
        if (config.nodeEnv === 'development') {
          logger.info(`üìñ API Documentation: http://localhost:${config.port}/api`);
        }
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º graceful shutdown
      handleGracefulShutdown(this.server);

    } catch (error) {
      logger.error('Failed to start server:', error);
      process.exit(1);
    }
  }

  private async createDirectories(): Promise<void> {
    const fs = require('fs');
    const path = require('path');

    const directories = [
      'logs',
      'temp',
      'uploads'
    ];

    for (const dir of directories) {
      const dirPath = path.join(process.cwd(), dir);
      if (!fs.existsSync(dirPath)) {
        fs.mkdirSync(dirPath, { recursive: true });
        logger.info(`Created directory: ${dir}`);
      }
    }
  }

  public getApp(): express.Application {
    return this.app;
  }

  public getServer(): any {
    return this.server;
  }

  public getIO(): Server {
    return this.io;
  }
}

// –†–∞—Å—à–∏—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è Socket.IO
declare global {
  var io: Server;
}

// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
const app = new App();

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  app.start().catch((error) => {
    logger.error('Failed to start application:', error);
    process.exit(1);
  });
}

export default app; 