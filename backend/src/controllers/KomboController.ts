import { Request, Response } from 'express';
import { AuthRequest } from '../middleware/auth';
import { AdsPowerService } from '../services/AdsPowerService';
import { DropboxService } from '../services/DropboxService';
import PupiterService, { PupiterConfig, PupiterStatus } from '../services/PupiterService';
// import AdsPowerConfigGenerator from '../services/AdsPowerConfigGenerator'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
import { Account, IAccount } from '../models/Account';
import logger from '../utils/logger';
import multer from 'multer';
import path from 'path';
import fs from 'fs';

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Pupiter –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
const globalPupiter = new PupiterService();

// –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π AdsPower
class AdsPowerConfigGenerator {
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è User-Agent –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π Chrome
  static generateUserAgent(): string {
    const chromeVersions = ['138.0.6887.54', '137.0.6864.110', '136.0.6803.90'];
    const version = chromeVersions[Math.floor(Math.random() * chromeVersions.length)];
    const windowsVersions = ['10.0', '11.0'];
    const winVersion = windowsVersions[Math.floor(Math.random() * windowsVersions.length)];
    
    return `Mozilla/5.0 (Windows NT ${winVersion}; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/${version} Safari/537.36`;
  }

  // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è WebGL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  static generateWebGLConfig() {
    const vendors = [
      { vendor: 'Google Inc. (AMD)', renderer: 'ANGLE (AMD, AMD Radeon RX 6800 XT (0x000073BF) Direct3D11 vs_5_0 ps_5_0, D3D11)' },
      { vendor: 'Google Inc. (Intel)', renderer: 'ANGLE (Intel, Intel(R) UHD Graphics 630 (0x00003E9B) Direct3D11 vs_5_0 ps_5_0, D3D11)' },
      { vendor: 'Google Inc. (Apple)', renderer: 'ANGLE (Apple, ANGLE Metal Renderer: Apple M1, Version 14.2)' }
    ];
    
    const config = vendors[Math.floor(Math.random() * vendors.length)];
    return {
      vendor: config.vendor,
      renderer: config.renderer,
      // Canvas –∏ WebGL Image –û–¢–ö–õ–Æ–ß–ï–ù–´ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Instagram
      canvasImage: 'disabled',
      webglImage: 'disabled'
    };
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
  static generateProfileConfig(profileName: string, instagramLogin: string) {
    const webglConfig = this.generateWebGLConfig();
    
    return {
      // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      name: profileName,
      browser: 'SunBrowser', // Chrome-based –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      browserVersion: Math.floor(Math.random() * 3) + 136, // 136-138
      system: 'Windows',
      systemVersion: Math.random() > 0.7 ? '11' : '10', // 70% Windows 10, 30% Windows 11
      userAgent: this.generateUserAgent(),
      group: 'Instagram_Automation',
      notes: `–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è Instagram: ${instagramLogin}`,
      
      // –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞—á–∞–ª—å–Ω—ã–µ)
      proxy: {
        type: 'no_proxy', // –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏
        platform: 'none'
      },
      
      // –û—Ç–ø–µ—á–∞—Ç–æ–∫ –±—Ä–∞—É–∑–µ—Ä–∞
      fingerprint: {
        webgl: {
          vendor: webglConfig.vendor,
          renderer: webglConfig.renderer,
          canvasImage: webglConfig.canvasImage,
          webglImage: webglConfig.webglImage
        },
        canvas: {
          noise: true // –í–∫–ª—é—á–∞–µ–º —à—É–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        },
        audioContext: {
          noise: true
        },
        clientRects: {
          noise: true
        },
        fonts: 'auto', // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä —à—Ä–∏—Ñ—Ç–æ–≤
        geolocation: 'disabled', // –û—Ç–∫–ª—é—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        language: ['ru-RU', 'ru', 'en-US', 'en'],
        timezone: 'Europe/Moscow', // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å
        resolution: this.generateOptimalResolution()
      }
    };
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —ç–∫—Ä–∞–Ω–∞
  static generateOptimalResolution() {
    const resolutions = [
      { width: 1920, height: 1080 },
      { width: 1366, height: 768 },
      { width: 1536, height: 864 },
      { width: 1440, height: 900 }
    ];
    
    return resolutions[Math.floor(Math.random() * resolutions.length)];
  }
}

// –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
class KomboRecoverySystem {
  
  static async checkProfileHealth(profileId: string): Promise<boolean> {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤ AdsPower
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ—Ñ–∏–ª—è
      return true;
    } catch (error) {
      logger.error('Profile health check failed', { profileId, error });
      return false;
    }
  }
  
  static async autoRecover(profileId: string): Promise<boolean> {
    try {
      logger.info('Starting auto-recovery for profile', { profileId });
      
      // 1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      // 2. –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à
      // 3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      // 4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
      
      return true;
    } catch (error) {
      logger.error('Auto-recovery failed', { profileId, error });
      return false;
    }
  }
}

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä KOMBO —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Pupiter
export class KomboController {

  // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Pupiter
  static async getPupiterStatus(req: AuthRequest, res: Response) {
    try {
      const status = globalPupiter.getStatus();
      res.json(status);
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ Pupiter:', error);
      res.status(500).json({ error: error.message });
    }
  }

  // üìÅ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Dropbox
  static async connectDropbox(req: AuthRequest, res: Response) {
    try {
      const dropboxService = new DropboxService();
      
      if (!dropboxService.isServiceEnabled()) {
        return res.status(400).json({ 
          error: 'Dropbox –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
          message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å DROPBOX_ACCESS_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è'
        });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const accountInfo = await dropboxService.getAccountInfo();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
      const videoFiles = await dropboxService.getVideoFiles('/');
      
      res.json({
        success: true,
        message: 'Dropbox –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        account: {
          name: accountInfo.name.display_name,
          email: accountInfo.email
        },
        folderPath: '/',
        filesCount: videoFiles.length,
        videoFiles: videoFiles.slice(0, 10) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Dropbox:', error);
      res.status(500).json({ 
        error: error.message,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Dropbox. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞.'
      });
    }
  }

  // üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
  static uploadConfig = multer({
    dest: path.join(__dirname, '../../uploads/kombo/'),
    limits: {
      fileSize: 100 * 1024 * 1024, // 100MB
      files: 50
    },
    fileFilter: (req, file, cb) => {
      if (file.mimetype.startsWith('video/')) {
        cb(null, true);
      } else {
        cb(new Error('–¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'));
      }
    }
  });

  static async uploadMedia(req: AuthRequest, res: Response) {
    try {
      const files = req.files as Express.Multer.File[];
      if (!files || files.length === 0) {
        return res.status(400).json({ error: '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏' });
      }

      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const uploadDir = path.join(__dirname, '../../uploads/kombo/');
      if (!fs.existsSync(uploadDir)) {
        fs.mkdirSync(uploadDir, { recursive: true });
      }

      const mediaFiles = files.map(file => ({
        originalName: file.originalname,
        fileName: file.filename,
        filePath: file.path,
        size: file.size,
        uploadedAt: new Date().toISOString(),
        mimetype: file.mimetype
      }));

      logger.info(`üì§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${mediaFiles.length} –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤`);

      res.json({
        success: true,
        files: mediaFiles,
        message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${mediaFiles.length} —Ñ–∞–π–ª–æ–≤`,
        totalSize: files.reduce((sum, file) => sum + file.size, 0)
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', error);
      res.status(500).json({ error: error.message });
    }
  }

  // üë§ –°–û–•–†–ê–ù–ï–ù–ò–ï INSTAGRAM –î–ê–ù–ù–´–• –í –ë–ê–ó–£
  static async saveInstagramData(req: AuthRequest, res: Response) {
    try {
      const { login, password, profileName, maxPostsPerDay, dropboxFolder } = req.body;
      
      if (!login || !password) {
        return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (login.length < 3) {
        return res.status(400).json({ error: '–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞' });
      }

      if (password.length < 6) {
        return res.status(400).json({ error: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤' });
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç
      const existingAccount = await Account.findOne({ 
        username: login.toLowerCase(),
        createdBy: req.user!.userId 
      });

      let account: IAccount;

      if (existingAccount) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
        existingAccount.password = password; // –ë—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –≤ pre-save middleware
        existingAccount.displayName = profileName || login;
        existingAccount.maxPostsPerDay = maxPostsPerDay || 3;
        existingAccount.dropboxFolder = dropboxFolder || '/';
        existingAccount.status = 'pending';
        existingAccount.adsPowerStatus = 'none';
        
        account = await existingAccount.save();
        logger.info(`üìù Instagram –∞–∫–∫–∞—É–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: ${login}`);
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
        account = new Account({
          username: login.toLowerCase(),
          password: password, // –ë—É–¥–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
          displayName: profileName || login,
          email: login.includes('@') ? login : undefined,
          status: 'pending',
          maxPostsPerDay: maxPostsPerDay || 3,
          dropboxFolder: dropboxFolder || '/',
          defaultCaption: 'üî• –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç! #instagram #reels',
          adsPowerStatus: 'none',
          createdBy: req.user!.userId,
          tags: ['KOMBO']
        });

        account = await account.save();
        logger.info(`‚úÖ –ù–æ–≤—ã–π Instagram –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω: ${login}`);
      }

      res.json({
        success: true,
        message: existingAccount ? '–î–∞–Ω–Ω—ã–µ Instagram –æ–±–Ω–æ–≤–ª–µ–Ω—ã' : '–ù–æ–≤—ã–π Instagram –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω',
        account: {
          id: account._id,
          login: account.username,
          displayName: account.displayName,
          profileName: account.displayName,
          maxPostsPerDay: account.maxPostsPerDay,
          dropboxFolder: account.dropboxFolder,
          status: account.status,
          adsPowerStatus: account.adsPowerStatus,
          createdAt: account.createdAt
        }
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Instagram –¥–∞–Ω–Ω—ã—Ö:', error);
      res.status(500).json({ error: error.message });
    }
  }

  // üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï ADSPOWER –ü–†–û–§–ò–õ–Ø
  static async createAdsPowerProfile(req: AuthRequest, res: Response) {
    try {
      const { instagramData, settings } = req.body;
      
      if (!instagramData?.login || !instagramData?.password) {
        return res.status(400).json({ error: '–î–∞–Ω–Ω—ã–µ Instagram –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' });
      }

      logger.info(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è ${instagramData.login}`);

      // –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const account = await Account.findOne({ 
        username: instagramData.login.toLowerCase(),
        createdBy: req.user!.userId 
      });

      if (!account) {
        return res.status(404).json({ 
          error: 'Instagram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
          message: '–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞'
        });
      }

      const adsPowerService = new AdsPowerService();
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å AdsPower API
        const isConnected = await adsPowerService.checkConnection();
        if (!isConnected) {
          throw new Error('AdsPower –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://local.adspower.net:50325');
        }

        logger.info('‚úÖ AdsPower API –ø–æ–¥–∫–ª—é—á–µ–Ω');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        account.adsPowerStatus = 'creating';
        await account.save();

        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        const result = await adsPowerService.createInstagramProfile({
          login: account.username,
          password: account.decryptPassword(), // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
          profileName: account.displayName
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—è –≤ –±–∞–∑—É
        account.adsPowerProfileId = result.profileId;
        account.adsPowerStatus = 'created';
        account.adsPowerLastSync = new Date();
        account.status = 'active';
        account.adsPowerError = undefined;
        
        await account.save();

        logger.info(`‚úÖ AdsPower –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ID ${result.profileId}`);

        res.json({
          success: true,
          result: result,
          message: `–ü—Ä–æ—Ñ–∏–ª—å AdsPower —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ (ID: ${result.profileId})`,
          account: {
            id: account._id,
            username: account.username,
            adsPowerProfileId: account.adsPowerProfileId,
            status: account.status,
            adsPowerStatus: account.adsPowerStatus
          },
          details: {
            profileId: result.profileId,
            profileName: account.displayName,
            browser: 'Chrome 138 (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è Instagram)',
            os: 'Windows 10/11',
            fingerprint: '–ù–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏'
          }
        });

      } catch (adsPowerError: any) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –±–∞–∑—É
        account.adsPowerStatus = 'error';
        account.adsPowerError = adsPowerError.message;
        await account.save();
        
        logger.error(`AdsPower –æ—à–∏–±–∫–∞: ${adsPowerError.message}`);
        throw adsPowerError;
      }

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AdsPower –ø—Ä–æ—Ñ–∏–ª—è:', error);
      res.status(500).json({ 
        error: error.message,
        troubleshooting: {
          'AdsPower –Ω–µ –∑–∞–ø—É—â–µ–Ω': '–ó–∞–ø—É—Å—Ç–∏—Ç–µ AdsPower –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 50325',
          '–õ–∏–º–∏—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π': '–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –≤ AdsPower',
          '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ': '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π Instagram'
        }
      });
    }
  }

  // üéÆ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò PUPITER
  static async startAutomation(req: AuthRequest, res: Response) {
    try {
      const { instagramData, mediaFiles, settings } = req.body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!instagramData?.login) {
        return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω –ª–æ–≥–∏–Ω Instagram –∞–∫–∫–∞—É–Ω—Ç–∞' });
      }

      if (!mediaFiles || mediaFiles.length === 0) {
        return res.status(400).json({ error: '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã' });
      }

      // –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const account = await Account.findOne({ 
        username: instagramData.login.toLowerCase(),
        createdBy: req.user!.userId 
      });

      if (!account) {
        return res.status(404).json({ 
          error: 'Instagram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
          message: '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Instagram –∞–∫–∫–∞—É–Ω—Ç'
        });
      }

      if (!account.adsPowerProfileId || account.adsPowerStatus !== 'created') {
        return res.status(400).json({ 
          error: 'AdsPower –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω',
          message: '–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞'
        });
      }

      // –ì–æ—Ç–æ–≤–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è Pupiter
      const pupiterConfig: PupiterConfig = {
        instagramLogin: account.username,
        instagramPassword: account.decryptPassword(),
        profileName: account.displayName,
        mediaFiles: mediaFiles.map((file: any) => file.filePath || file.path),
        settings: {
          postsPerDay: settings?.postsPerDay || account.maxPostsPerDay,
          timeBetweenPosts: settings?.timeBetweenPosts || 4,
          autoRestart: settings?.autoRestart || true,
          useProxy: settings?.useProxy || false
        }
      };

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞
      account.isRunning = true;
      account.lastActivity = new Date();
      await account.save();

      logger.info('üéÆ Pupiter: –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Instagram');

      // –ó–∞–ø—É—Å–∫–∞–µ–º Pupiter
      const result = await globalPupiter.startFullAutomation(pupiterConfig);

      res.json({
        success: true,
        message: result.message,
        pupiterStatus: globalPupiter.getStatus(),
        account: {
          id: account._id,
          username: account.username,
          status: account.status,
          isRunning: account.isRunning,
          adsPowerProfileId: account.adsPowerProfileId
        },
        config: {
          instagramLogin: pupiterConfig.instagramLogin,
          mediaFilesCount: pupiterConfig.mediaFiles.length,
          settings: pupiterConfig.settings
        }
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
      res.status(500).json({ 
        error: error.message,
        pupiterStatus: globalPupiter.getStatus()
      });
    }
  }

  // ‚èπÔ∏è –û–°–¢–ê–ù–û–í–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò
  static async stopAutomation(req: AuthRequest, res: Response) {
    try {
      await globalPupiter.stopAutomation();

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
      await Account.updateMany(
        { isRunning: true, createdBy: req.user!.userId },
        { isRunning: false, lastActivity: new Date() }
      );

      res.json({
        success: true,
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
        pupiterStatus: globalPupiter.getStatus()
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
      res.status(500).json({ error: error.message });
    }
  }

  // ‚è∏Ô∏è –ü–ê–£–ó–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò
  static async pauseAutomation(req: AuthRequest, res: Response) {
    try {
      await globalPupiter.pauseAutomation();

      res.json({
        success: true,
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
        pupiterStatus: globalPupiter.getStatus()
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞—É–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
      res.status(500).json({ error: error.message });
    }
  }

  // ‚ñ∂Ô∏è –í–û–ó–û–ë–ù–û–í–õ–ï–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò
  static async resumeAutomation(req: AuthRequest, res: Response) {
    try {
      await globalPupiter.resumeAutomation();

      res.json({
        success: true,
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞',
        pupiterStatus: globalPupiter.getStatus()
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
      res.status(500).json({ error: error.message });
    }
  }

  // üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò
  static async restartAutomation(req: AuthRequest, res: Response) {
    try {
      await globalPupiter.restartAutomation();

      res.json({
        success: true,
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞',
        pupiterStatus: globalPupiter.getStatus()
      });
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:', error);
      res.status(500).json({ error: error.message });
    }
  }

  // üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´
  static async performDiagnostics(req: AuthRequest, res: Response) {
    try {
      const diagnostics = {
        timestamp: new Date().toISOString(),
        pupiter: globalPupiter.getStatus(),
        database: {
          connected: true,
          accountsCount: await Account.countDocuments({ createdBy: req.user!.userId }),
          activeAccounts: await Account.countDocuments({ 
            createdBy: req.user!.userId, 
            status: 'active' 
          }),
          runningAccounts: await Account.countDocuments({ 
            createdBy: req.user!.userId, 
            isRunning: true 
          })
        },
        system: {
          adsPowerAvailable: false,
          dropboxAvailable: false,
          diskSpace: 'N/A',
          memory: process.memoryUsage(),
          uptime: process.uptime()
        }
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ AdsPower
      try {
        const adsPowerService = new AdsPowerService();
        diagnostics.system.adsPowerAvailable = await adsPowerService.checkConnection();
      } catch {
        diagnostics.system.adsPowerAvailable = false;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ Dropbox
      try {
        const dropboxService = new DropboxService();
        diagnostics.system.dropboxAvailable = dropboxService.isServiceEnabled();
      } catch {
        diagnostics.system.dropboxAvailable = false;
      }

      res.json({
        success: true,
        message: '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
        diagnostics
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error);
      res.status(500).json({ error: error.message });
    }
  }

  // üìä –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–î–†–û–ë–ù–û–ô –°–¢–ê–¢–ò–°–¢–ò–ö–ò
  static async getDetailedStats(req: AuthRequest, res: Response) {
    try {
      const pupiterStatus = globalPupiter.getStatus();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const totalAccounts = await Account.countDocuments({ createdBy: req.user!.userId });
      const activeAccounts = await Account.countDocuments({ 
        createdBy: req.user!.userId, 
        status: 'active' 
      });
      const runningAccounts = await Account.countDocuments({ 
        createdBy: req.user!.userId, 
        isRunning: true 
      });

      // –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤
      const postsStats = await Account.aggregate([
        { $match: { createdBy: req.user!.userId } },
        {
          $group: {
            _id: null,
            totalPosts: { $sum: '$stats.totalPosts' },
            successfulPosts: { $sum: '$stats.successfulPosts' },
            failedPosts: { $sum: '$stats.failedPosts' },
            postsToday: { $sum: '$postsToday' }
          }
        }
      ]);

      const stats = {
        overview: {
          isRunning: pupiterStatus.isRunning,
          isPaused: pupiterStatus.isPaused,
          currentTask: pupiterStatus.currentTask,
          progress: pupiterStatus.progress
        },
        accounts: {
          total: totalAccounts,
          active: activeAccounts,
          running: runningAccounts,
          withAdsPower: await Account.countDocuments({ 
            createdBy: req.user!.userId, 
            adsPowerStatus: 'created' 
          })
        },
        automation: {
          adsPowerProfileId: pupiterStatus.adsPowerProfileId,
          adsPowerStatus: pupiterStatus.adsPowerStatus,
          instagramStatus: pupiterStatus.instagramStatus,
          queueStatus: pupiterStatus.queueStatus
        },
        performance: {
          publishedToday: postsStats[0]?.postsToday || 0,
          totalPublished: postsStats[0]?.totalPosts || 0,
          successfulPosts: postsStats[0]?.successfulPosts || 0,
          failedPosts: postsStats[0]?.failedPosts || 0,
          remainingInQueue: pupiterStatus.remainingInQueue,
          successRate: postsStats[0]?.totalPosts > 0 ? 
            ((postsStats[0]?.successfulPosts / postsStats[0]?.totalPosts) * 100).toFixed(1) + '%' : 
            '100%'
        },
        logs: {
          recent: pupiterStatus.logs.slice(-10),
          errors: pupiterStatus.errors.slice(-5),
          lastActivity: pupiterStatus.lastActivity
        }
      };

      res.json({
        success: true,
        stats
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      res.status(500).json({ error: error.message });
    }
  }

  // üìã –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ê–ö–ö–ê–£–ù–¢–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
  static async getUserAccounts(req: AuthRequest, res: Response) {
    try {
      const accounts = await Account.find({ createdBy: req.user!.userId })
        .select('username displayName status isRunning adsPowerStatus adsPowerProfileId maxPostsPerDay stats lastActivity createdAt')
        .sort({ createdAt: -1 });

      res.json({
        success: true,
        accounts: accounts.map(account => ({
          id: account._id,
          username: account.username,
          displayName: account.displayName,
          status: account.status,
          isRunning: account.isRunning,
          adsPowerStatus: account.adsPowerStatus,
          adsPowerProfileId: account.adsPowerProfileId,
          maxPostsPerDay: account.maxPostsPerDay,
          stats: account.stats,
          lastActivity: account.lastActivity,
          createdAt: account.createdAt
        }))
      });

    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤:', error);
      res.status(500).json({ error: error.message });
    }
  }
} 