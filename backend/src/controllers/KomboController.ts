import { Request, Response } from 'express';
import { KomboProject, IKomboProject } from '../models/KomboProject';
import { Account } from '../models/Account';
import { AuthRequest } from '../middleware/auth';
import { dropboxService } from '../services/DropboxService';
import { adsPowerProfileService } from '../services/AdsPowerProfileService';
import AdsPowerConfigGenerator from '../services/AdsPowerConfigGenerator';
import logger from '../utils/logger';
import cron from 'node-cron';
import multer from 'multer';
import path from 'path';
import fs from 'fs';

interface KomboScheduler {
  [projectId: string]: cron.ScheduledTask;
}

// üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = path.join(__dirname, '../../uploads/kombo-media');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, `kombo-${uniqueSuffix}${path.extname(file.originalname)}`);
  }
});

const upload = multer({ 
  storage,
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['.mp4', '.mov', '.avi', '.mkv', '.webm'];
    const ext = path.extname(file.originalname).toLowerCase();
    if (allowedTypes.includes(ext)) {
      cb(null, true);
    } else {
      cb(new Error('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã (mp4, mov, avi, mkv, webm)'));
    }
  },
  limits: {
    fileSize: 100 * 1024 * 1024 // 100MB –ª–∏–º–∏—Ç
  }
});

class KomboController {
  private static schedulers: KomboScheduler = {};

  /**
   * üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  static uploadMediaFiles = [
    upload.array('mediaFiles', 50), // –¥–æ 50 —Ñ–∞–π–ª–æ–≤
    async (req: AuthRequest, res: Response): Promise<void> => {
      try {
        const files = req.files as Express.Multer.File[];
        const { projectId } = req.params;

        if (!files || files.length === 0) {
          res.status(400).json({
            success: false,
            message: '–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã'
          });
          return;
        }

        const project = await KomboProject.findOne({ 
          _id: projectId, 
          createdBy: req.userId 
        });

        if (!project) {
          res.status(404).json({
            success: false,
            message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
          });
          return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–µ–¥–∏–∞
        project.localMediaPath = path.dirname(files[0].path);
        project.recentLogs.push({
          timestamp: new Date(),
          action: 'media_uploaded',
          status: 'success',
          message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${files.length} –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤`,
          mediaFileName: files.map(f => f.originalname).join(', ')
        });

        await project.save();

        logger.info(`üìÇ Media files uploaded for KOMBO project: ${project.name}`, {
          project_id: projectId,
          files_count: files.length,
          total_size: files.reduce((sum, f) => sum + f.size, 0)
        });

        res.json({
          success: true,
          message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤`,
          data: {
            files_count: files.length,
            upload_path: project.localMediaPath,
            files: files.map(f => ({
              original_name: f.originalname,
              size: f.size,
              path: f.path
            }))
          }
        });
      } catch (error) {
        logger.error('Error uploading media files:', error);
        res.status(500).json({
          success: false,
          message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤',
          error: error instanceof Error ? error.message : 'Unknown error'
        });
      }
    }
  ];

  /**
   * üìß –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  static async saveInstagramData(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { projectId } = req.params;
      const { login, password, profileName } = req.body;

      if (!login || !password) {
        res.status(400).json({
          success: false,
          message: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'
        });
        return;
      }

      const project = await KomboProject.findOne({ 
        _id: projectId, 
        createdBy: req.userId 
      });

      if (!project) {
        res.status(404).json({
          success: false,
          message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º Instagram –∞–∫–∫–∞—É–Ω—Ç
      let account = await Account.findOne({ username: login });
      
      if (!account) {
        account = new Account({
          username: login,
          password: password, // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å!
          platform: 'instagram',
          displayName: profileName || login,
          createdBy: req.userId!
        });
        await account.save();
        logger.info(`üì± Created new Instagram account: ${login}`);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        account.password = password;
        account.displayName = profileName || login;
        await account.save();
        logger.info(`üì± Updated Instagram account: ${login}`);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
      project.instagramAccountId = account._id.toString();
      project.instagramUsername = login;
      project.recentLogs.push({
        timestamp: new Date(),
        action: 'instagram_data_saved',
        status: 'success',
        message: `–î–∞–Ω–Ω—ã–µ Instagram —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${login}`
      });

      await project.save();

      res.json({
        success: true,
        message: '–î–∞–Ω–Ω—ã–µ Instagram —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ',
        data: {
          username: login,
          profile_name: profileName || login,
          account_id: account._id
        }
      });
    } catch (error) {
      logger.error('Error saving Instagram data:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö Instagram',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–ó–î–ê–ù–ò–ï AdsPower –ü–†–û–§–ò–õ–Ø (–∫–ª—é—á–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¢–ó)
   */
  static async createAdsPowerProfileAuto(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { projectId } = req.params;
      
      const project = await KomboProject.findOne({ 
        _id: projectId, 
        createdBy: req.userId 
      }).populate('instagramAccountId');

      if (!project) {
        res.status(404).json({
          success: false,
          message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      if (!project.instagramAccountId) {
        res.status(400).json({
          success: false,
          message: '–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞'
        });
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      project.adsPowerStatus = 'creating';
      project.recentLogs.push({
        timestamp: new Date(),
        action: 'adspower_auto_creation_start',
        status: 'info',
        message: 'üîÑ –°–æ–∑–¥–∞–Ω–∏–µ AdsPower –ø—Ä–æ—Ñ–∏–ª—è...'
      });
      await project.save();

      try {
        // üîÑ –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        project.recentLogs.push({
          timestamp: new Date(),
          action: 'adspower_config_generation',
          status: 'info',
          message: '‚è≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø–µ—á–∞—Ç–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞...'
        });
        await project.save();

        // üîÑ –≠—Ç–∞–ø 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏
        project.recentLogs.push({
          timestamp: new Date(),
          action: 'adspower_proxy_config',
          status: 'info',
          message: 'üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–∫—Å–∏...'
        });
        await project.save();

        // üîÑ –≠—Ç–∞–ø 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        project.recentLogs.push({
          timestamp: new Date(),
          action: 'adspower_advanced_settings',
          status: 'info',
          message: 'üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...'
        });
        await project.save();

        // üöÄ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        const account = project.instagramAccountId as any;
        const profileId = await adsPowerProfileService.createProfile(account);
        
        // ‚úÖ –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        project.adsPowerProfileId = profileId;
        project.adsPowerStatus = 'created';
        project.recentLogs.push({
          timestamp: new Date(),
          action: 'adspower_profile_created',
          status: 'success',
          message: `‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ! ID: ${profileId}`
        });
        
        await project.save();

        logger.info(`üöÄ AdsPower profile created automatically:`, {
          project_id: projectId,
          profile_id: profileId,
          instagram: project.instagramUsername
        });

        res.json({
          success: true,
          message: 'AdsPower –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!',
          data: { 
            profileId,
            instagram_username: project.instagramUsername,
            creation_method: 'automatic',
            config_info: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Instagram'
          }
        });
      } catch (adsPowerError) {
        // ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        project.adsPowerStatus = 'error';
        project.recentLogs.push({
          timestamp: new Date(),
          action: 'adspower_creation_error',
          status: 'error',
          message: `‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AdsPower –ø—Ä–æ—Ñ–∏–ª—è: ${adsPowerError instanceof Error ? adsPowerError.message : 'Unknown error'}`
        });
        await project.save();

        throw adsPowerError;
      }
    } catch (error) {
      logger.error('Error creating AdsPower profile automatically:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è AdsPower –ø—Ä–æ—Ñ–∏–ª—è',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * üéÆ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò (–≥–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¢–ó)
   */
  static async startFullCycle(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { projectId } = req.params;
      
      const project = await KomboProject.findOne({ 
        _id: projectId, 
        createdBy: req.userId 
      });

      if (!project) {
        res.status(404).json({
          success: false,
          message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const readinessCheck = await KomboController.checkProjectReadiness(project);
      if (!readinessCheck.ready) {
        res.status(400).json({
          success: false,
          message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É',
          missing_components: readinessCheck.missing
        });
        return;
      }

      if (project.isRunning) {
        res.status(400).json({
          success: false,
          message: '–ü—Ä–æ–µ–∫—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω'
        });
        return;
      }

      // üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
      await KomboController.startFullAutomation(project);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      project.status = 'active';
      project.isRunning = true;
      project.recentLogs.push({
        timestamp: new Date(),
        action: 'full_cycle_started',
        status: 'success',
        message: 'üöÄ –ü–û–õ–ù–´–ô –¶–ò–ö–õ –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–ò –ó–ê–ü–£–©–ï–ù'
      });
      
      await project.save();

      logger.info(`üöÄ Full cycle automation started:`, {
        project_id: projectId,
        project_name: project.name,
        instagram: project.instagramUsername
      });

      res.json({
        success: true,
        message: '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω!',
        data: { 
          status: project.status, 
          isRunning: project.isRunning,
          automation_components: readinessCheck.components
        }
      });
    } catch (error) {
      logger.error('Error starting full cycle automation:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * ‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
   */
  static async stopFullCycle(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { projectId } = req.params;
      
      const project = await KomboProject.findOne({ 
        _id: projectId, 
        createdBy: req.userId 
      });

      if (!project) {
        res.status(404).json({
          success: false,
          message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
      KomboController.stopScheduler(projectId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      project.status = 'stopped';
      project.isRunning = false;
      project.recentLogs.push({
        timestamp: new Date(),
        action: 'full_cycle_stopped',
        status: 'info',
        message: '‚èπ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'
      });
      
      await project.save();

      logger.info(`‚èπ Full cycle automation stopped: ${project.name}`);

      res.json({
        success: true,
        message: '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        data: { status: project.status, isRunning: project.isRunning }
      });
    } catch (error) {
      logger.error('Error stopping full cycle automation:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ –∑–∞–ø—É—Å–∫—É
   */
  private static async checkProjectReadiness(project: IKomboProject) {
    const missing: string[] = [];
    const components: any = {};

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    const hasContent = project.dropboxFolderId || project.localMediaPath;
    components.content = hasContent;
    if (!hasContent) missing.push('–ö–æ–Ω—Ç–µ–Ω—Ç (Dropbox –ø–∞–ø–∫–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Instagram –¥–∞–Ω–Ω—ã–µ
    components.instagram = !!project.instagramAccountId;
    if (!project.instagramAccountId) missing.push('–î–∞–Ω–Ω—ã–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º AdsPower –ø—Ä–æ—Ñ–∏–ª—å
    components.adspower = project.adsPowerStatus === 'created';
    if (project.adsPowerStatus !== 'created') missing.push('AdsPower –ø—Ä–æ—Ñ–∏–ª—å');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    components.schedule = project.publicationSchedule.enabled;
    if (!project.publicationSchedule.enabled) missing.push('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');

    return {
      ready: missing.length === 0,
      missing,
      components
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ KOMBO –ø—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getProjects(req: AuthRequest, res: Response): Promise<void> {
    try {
      const projects = await KomboProject.find({ createdBy: req.userId })
        .populate('instagramAccountId', 'username platform status')
        .sort({ updatedAt: -1 });

      res.json({
        success: true,
        data: projects,
        total: projects.length
      });
    } catch (error) {
      logger.error('Error fetching kombo projects:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π KOMBO –ø—Ä–æ–µ–∫—Ç
   */
  static async createProject(req: AuthRequest, res: Response): Promise<void> {
    try {
      const {
        name,
        description,
        instagramAccountId,
        dropboxFolderId,
        publicationSchedule,
        contentSettings
      } = req.body;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ Instagram –∞–∫–∫–∞—É–Ω—Ç–∞
      const account = await Account.findOne({ 
        _id: instagramAccountId, 
        createdBy: req.userId 
      });
      
      if (!account) {
        res.status(404).json({
          success: false,
          message: 'Instagram –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
      const project = new KomboProject({
        name,
        description,
        instagramAccountId,
        instagramUsername: account.username,
        dropboxFolderId,
        publicationSchedule: {
          enabled: false,
          frequency: 'daily',
          postsPerDay: 1,
          timezone: 'UTC',
          ...publicationSchedule
        },
        contentSettings: {
          randomOrder: true,
          addHashtags: false,
          addCaption: false,
          ...contentSettings
        },
        status: 'draft',
        stats: {
          totalPublished: 0,
          successRate: 100,
          errorsCount: 0
        },
        recentLogs: [{
          timestamp: new Date(),
          action: 'project_created',
          status: 'info',
          message: `–ü—Ä–æ–µ–∫—Ç "${name}" —Å–æ–∑–¥–∞–Ω`
        }],
        createdBy: req.userId!
      });

      await project.save();

      logger.info(`Kombo project created: ${project.name} by user ${req.userId}`);

      res.status(201).json({
        success: true,
        message: 'KOMBO –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
        data: project
      });
    } catch (error) {
      logger.error('Error creating kombo project:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å AdsPower –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  static async setupAdsPowerProfile(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { projectId } = req.params;
      
      const project = await KomboProject.findOne({ 
        _id: projectId, 
        createdBy: req.userId 
      }).populate('instagramAccountId');

      if (!project) {
        res.status(404).json({
          success: false,
          message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      project.adsPowerStatus = 'creating';
      project.recentLogs.push({
        timestamp: new Date(),
        action: 'adspower_setup_start',
        status: 'info',
        message: '–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è AdsPower –ø—Ä–æ—Ñ–∏–ª—è'
      });
      await project.save();

      try {
        // –°–æ–∑–¥–∞–µ–º AdsPower –ø—Ä–æ—Ñ–∏–ª—å
        const account = project.instagramAccountId as any;
        const profileId = await adsPowerProfileService.createProfile(account);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç
        project.adsPowerProfileId = profileId;
        project.adsPowerStatus = 'created';
        project.recentLogs.push({
          timestamp: new Date(),
          action: 'adspower_setup_success',
          status: 'success',
          message: `AdsPower –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: ${profileId}`
        });
        
        await project.save();

        res.json({
          success: true,
          message: 'AdsPower –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
          data: { profileId }
        });
      } catch (adsPowerError) {
        // –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        project.adsPowerStatus = 'error';
        project.recentLogs.push({
          timestamp: new Date(),
          action: 'adspower_setup_error',
          status: 'error',
          message: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AdsPower –ø—Ä–æ—Ñ–∏–ª—è: ${adsPowerError instanceof Error ? adsPowerError.message : 'Unknown error'}`
        });
        await project.save();

        throw adsPowerError;
      }
    } catch (error) {
      logger.error('Error setting up AdsPower profile:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AdsPower –ø—Ä–æ—Ñ–∏–ª—è',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
   */
  static async startProject(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { projectId } = req.params;
      
      const project = await KomboProject.findOne({ 
        _id: projectId, 
        createdBy: req.userId 
      });

      if (!project) {
        res.status(404).json({
          success: false,
          message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      if (project.isRunning) {
        res.status(400).json({
          success: false,
          message: '–ü—Ä–æ–µ–∫—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω'
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
      if (!project.adsPowerProfileId || project.adsPowerStatus !== 'created') {
        res.status(400).json({
          success: false,
          message: 'AdsPower –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        });
        return;
      }

      if (!project.publicationSchedule.enabled) {
        res.status(400).json({
          success: false,
          message: '–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
        });
        return;
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
      await KomboController.startScheduler(project);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      project.status = 'active';
      project.isRunning = true;
      project.recentLogs.push({
        timestamp: new Date(),
        action: 'project_started',
        status: 'success',
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞'
      });
      
      await project.save();

      logger.info(`Kombo project started: ${project.name}`);

      res.json({
        success: true,
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        data: { status: project.status, isRunning: project.isRunning }
      });
    } catch (error) {
      logger.error('Error starting kombo project:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
   */
  static async stopProject(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { projectId } = req.params;
      
      const project = await KomboProject.findOne({ 
        _id: projectId, 
        createdBy: req.userId 
      });

      if (!project) {
        res.status(404).json({
          success: false,
          message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
      KomboController.stopScheduler(projectId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      project.status = 'stopped';
      project.isRunning = false;
      project.recentLogs.push({
        timestamp: new Date(),
        action: 'project_stopped',
        status: 'info',
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
      });
      
      await project.save();

      logger.info(`Kombo project stopped: ${project.name}`);

      res.json({
        success: true,
        message: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
        data: { status: project.status, isRunning: project.isRunning }
      });
    } catch (error) {
      logger.error('Error stopping kombo project:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–µ–∫—Ç–∞
   */
  static async getProjectStats(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { projectId } = req.params;
      
      const project = await KomboProject.findOne({ 
        _id: projectId, 
        createdBy: req.userId 
      });

      if (!project) {
        res.status(404).json({
          success: false,
          message: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ–¥–∏–∞ –∏–∑ Dropbox
      let mediaCount = 0;
      if (project.dropboxFolderId) {
        try {
          const mediaFiles = await dropboxService.listFiles(project.dropboxFolderId);
          mediaCount = mediaFiles.length;
        } catch (error) {
          logger.warn('Error getting dropbox media count:', error);
        }
      }

      const stats = {
        project: {
          name: project.name,
          status: project.status,
          isRunning: project.isRunning,
          adsPowerStatus: project.adsPowerStatus
        },
        content: {
          totalMediaFiles: mediaCount,
          publishedCount: project.stats.totalPublished,
          remainingCount: Math.max(0, mediaCount - project.stats.totalPublished)
        },
        performance: {
          successRate: project.stats.successRate,
          errorsCount: project.stats.errorsCount,
          lastPublishedAt: project.stats.lastPublishedAt
        },
        schedule: {
          enabled: project.publicationSchedule.enabled,
          frequency: project.publicationSchedule.frequency,
          postsPerHour: project.publicationSchedule.postsPerHour,
          postsPerDay: project.publicationSchedule.postsPerDay
        },
        recentLogs: project.recentLogs.slice(-10).reverse() // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
      };

      res.json({
        success: true,
        data: stats
      });
    } catch (error) {
      logger.error('Error getting project stats:', error);
      res.status(500).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏',
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    }
  }

  /**
   * –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  private static async startScheduler(project: IKomboProject): Promise<void> {
    const projectId = project._id.toString();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    KomboController.stopScheduler(projectId);
    
    const schedule = project.publicationSchedule;
    let cronExpression = '';
    
    if (schedule.frequency === 'hourly' && schedule.postsPerHour) {
      // –ö–∞–∂–¥—ã–µ X –º–∏–Ω—É—Ç –¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ —á–∞—Å
      const intervalMinutes = Math.floor(60 / schedule.postsPerHour);
      cronExpression = `*/${intervalMinutes} * * * *`;
    } else if (schedule.frequency === 'daily' && schedule.postsPerDay) {
      if (schedule.specificTimes && schedule.specificTimes.length > 0) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        // TODO: –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ cron job'—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        cronExpression = '0 9 * * *'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 9:00
      } else {
        // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥–Ω—é
        const intervalHours = Math.floor(24 / schedule.postsPerDay);
        cronExpression = `0 */${intervalHours} * * *`;
      }
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑ –≤ –¥–µ–Ω—å –≤ 9:00
      cronExpression = '0 9 * * *';
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    const task = cron.schedule(cronExpression, async () => {
      await KomboController.executePublicationTask(projectId);
    }, {
      scheduled: false // –ù–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    KomboController.schedulers[projectId] = task;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º
    task.start();
    
    logger.info(`Scheduler started for project ${projectId} with cron: ${cronExpression}`);
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  private static stopScheduler(projectId: string): void {
    const task = KomboController.schedulers[projectId];
    if (task) {
      task.stop();
      task.destroy();
      delete KomboController.schedulers[projectId];
      logger.info(`Scheduler stopped for project ${projectId}`);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
   */
  private static async executePublicationTask(projectId: string): Promise<void> {
    try {
      const project = await KomboProject.findById(projectId)
        .populate('instagramAccountId');
      
      if (!project || !project.isRunning) {
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ –∏–∑ Dropbox
      if (!project.dropboxFolderId) {
        throw new Error('Dropbox –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
      }

      const mediaFiles = await dropboxService.listFiles(project.dropboxFolderId);
      if (mediaFiles.length === 0) {
        throw new Error('–ù–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ');
      }

      // –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª
      let selectedFile;
      if (project.contentSettings.randomOrder) {
        selectedFile = mediaFiles[Math.floor(Math.random() * mediaFiles.length)];
      } else {
        selectedFile = mediaFiles[0]; // –ü–µ—Ä–≤—ã–π —Ñ–∞–π–ª
      }

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
      const fileBuffer = await dropboxService.downloadFile(selectedFile.id);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      let caption = '';
      if (project.contentSettings.addCaption && project.contentSettings.defaultCaption) {
        caption = project.contentSettings.defaultCaption;
      }
      if (project.contentSettings.addHashtags && project.contentSettings.defaultHashtags) {
        caption += ' ' + project.contentSettings.defaultHashtags.join(' ');
      }

      // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Puppeteer –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AdsPower
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Instagram automation
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      project.stats.totalPublished += 1;
      project.stats.lastPublishedAt = new Date();
      project.recentLogs.push({
        timestamp: new Date(),
        action: 'media_published',
        status: 'success',
        message: `–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: ${selectedFile.name}`,
        mediaFileName: selectedFile.name
      });

      await project.save();

      logger.info(`Media published for project ${projectId}: ${selectedFile.name}`);
    } catch (error) {
      logger.error(`Publication task failed for project ${projectId}:`, error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫
      const project = await KomboProject.findById(projectId);
      if (project) {
        project.stats.errorsCount += 1;
        project.stats.successRate = Math.round(
          (project.stats.totalPublished / (project.stats.totalPublished + project.stats.errorsCount)) * 100
        );
        project.recentLogs.push({
          timestamp: new Date(),
          action: 'publication_error',
          status: 'error',
          message: `–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${error instanceof Error ? error.message : 'Unknown error'}`
        });
        await project.save();
      }
    }
  }
}

export { KomboController }; 