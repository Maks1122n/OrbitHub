import { Request, Response } from 'express';
import { Proxy, IProxy } from '../models/Proxy';
import { AuthRequest } from '../middleware/auth';
import logger from '../utils/logger';
import fetch from 'node-fetch';

export class ProxyController {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getProxies(req: AuthRequest, res: Response): Promise<void> {
    try {
      const userId = req.user?.userId;
      
      const proxies = await Proxy.find({ createdBy: userId }).sort({ createdAt: -1 });
      
      res.json({
        success: true,
        data: proxies,
        total: proxies.length
      });
    } catch (error) {
      logger.error('‚ùå Error fetching proxies:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∫—Å–∏'
      });
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –ø–æ ID
   */
  static async getProxy(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const userId = req.user?.userId;

      const proxy = await Proxy.findOne({ _id: id, createdBy: userId });
      
      if (!proxy) {
        res.status(404).json({
          success: false,
          error: '–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      res.json({
        success: true,
        data: proxy
      });
    } catch (error) {
      logger.error('‚ùå Error fetching proxy:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏'
      });
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
   */
  static async createProxy(req: AuthRequest, res: Response): Promise<void> {
    try {
      const userId = req.user?.userId;
      const {
        name,
        host,
        port,
        username,
        password,
        type,
        country,
        city,
        provider
      } = req.body;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!name || !host || !port) {
        res.status(400).json({
          success: false,
          error: '–ù–∞–∑–≤–∞–Ω–∏–µ, —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
        });
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å host:port
      const existingProxy = await Proxy.findOne({ host, port });
      if (existingProxy) {
        res.status(400).json({
          success: false,
          error: '–ü—Ä–æ–∫—Å–∏ —Å —Ç–∞–∫–∏–º —Ö–æ—Å—Ç–æ–º –∏ –ø–æ—Ä—Ç–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        });
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
      const proxy = new Proxy({
        name,
        host,
        port: parseInt(port),
        username,
        password,
        type: type || 'http',
        country,
        city,
        provider,
        status: 'active',
        isWorking: true,
        createdBy: userId
      });

      await proxy.save();

      logger.info(`‚úÖ New proxy created: ${name} (${host}:${port})`);

      res.status(201).json({
        success: true,
        data: proxy,
        message: '–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω'
      });
    } catch (error) {
      logger.error('‚ùå Error creating proxy:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏'
      });
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏
   */
  static async updateProxy(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const userId = req.user?.userId;
      const updateData = req.body;

      const proxy = await Proxy.findOne({ _id: id, createdBy: userId });
      
      if (!proxy) {
        res.status(404).json({
          success: false,
          error: '–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
      const allowedFields = ['name', 'host', 'port', 'username', 'password', 'type', 'country', 'city', 'provider', 'status'];
      Object.keys(updateData).forEach(key => {
        if (allowedFields.includes(key)) {
          (proxy as any)[key] = updateData[key];
        }
      });

      await proxy.save();

      logger.info(`‚úÖ Proxy updated: ${proxy.name} (${proxy.host}:${proxy.port})`);

      res.json({
        success: true,
        data: proxy,
        message: '–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
      });
    } catch (error) {
      logger.error('‚ùå Error updating proxy:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏'
      });
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–∫—Å–∏
   */
  static async deleteProxy(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const userId = req.user?.userId;

      const proxy = await Proxy.findOne({ _id: id, createdBy: userId });
      
      if (!proxy) {
        res.status(404).json({
          success: false,
          error: '–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      await Proxy.findByIdAndDelete(id);

      logger.info(`‚úÖ Proxy deleted: ${proxy.name} (${proxy.host}:${proxy.port})`);

      res.json({
        success: true,
        message: '–ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      });
    } catch (error) {
      logger.error('‚ùå Error deleting proxy:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏'
      });
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏
   */
  static async testProxy(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { id } = req.params;
      const userId = req.user?.userId;

      const proxy = await Proxy.findOne({ _id: id, createdBy: userId });
      
      if (!proxy) {
        res.status(404).json({
          success: false,
          error: '–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
        return;
      }

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏
      const testResult = await ProxyController.performProxyTest(proxy);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏
      proxy.isWorking = testResult.success;
      proxy.status = testResult.success ? 'active' : 'error';
      proxy.lastChecked = new Date();
      await proxy.save();

      logger.info(`üß™ Proxy test result for ${proxy.name}: ${testResult.success ? 'SUCCESS' : 'FAILED'}`);

      res.json({
        success: true,
        data: {
          proxyId: proxy._id,
          isWorking: testResult.success,
          response: testResult
        }
      });
    } catch (error) {
      logger.error('‚ùå Error testing proxy:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏'
      });
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
   */
  static async testProxyData(req: AuthRequest, res: Response): Promise<void> {
    try {
      const { host, port, username, password, type } = req.body;

      if (!host || !port) {
        res.status(400).json({
          success: false,
          error: '–•–æ—Å—Ç –∏ –ø–æ—Ä—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        });
        return;
      }

      const testProxy: Partial<IProxy> = {
        host,
        port: parseInt(port),
        username,
        password,
        type: type || 'http'
      };

      const testResult = await ProxyController.performProxyTest(testProxy as IProxy);

      res.json({
        success: true,
        data: testResult
      });
    } catch (error) {
      logger.error('‚ùå Error testing proxy data:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏'
      });
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç –ø—Ä–æ–∫—Å–∏
   */
  private static async performProxyTest(proxy: IProxy): Promise<{
    success: boolean;
    responseTime?: number;
    ip?: string;
    location?: string;
    error?: string;
  }> {
    const startTime = Date.now();
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º URL –ø—Ä–æ–∫—Å–∏
      let proxyUrl = `${proxy.type}://`;
      if (proxy.username && proxy.password) {
        proxyUrl += `${proxy.username}:${proxy.password}@`;
      }
      proxyUrl += `${proxy.host}:${proxy.port}`;

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ httpbin.org
      const response = await fetch('http://httpbin.org/ip', {
        method: 'GET',
        timeout: 10000,
        agent: require('https-proxy-agent')(proxyUrl)
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json() as { origin: string };
      const responseTime = Date.now() - startTime;

      return {
        success: true,
        responseTime,
        ip: data.origin,
        location: proxy.country || 'Unknown'
      };

    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ–∫—Å–∏
   */
  static async getProxyStats(req: AuthRequest, res: Response): Promise<void> {
    try {
      const userId = req.user?.userId;

      const stats = await Proxy.aggregate([
        { $match: { createdBy: userId } },
        {
          $group: {
            _id: null,
            total: { $sum: 1 },
            active: { $sum: { $cond: [{ $eq: ["$status", "active"] }, 1, 0] } },
            inactive: { $sum: { $cond: [{ $eq: ["$status", "inactive"] }, 1, 0] } },
            error: { $sum: { $cond: [{ $eq: ["$status", "error"] }, 1, 0] } },
            working: { $sum: { $cond: ["$isWorking", 1, 0] } }
          }
        }
      ]);

      const result = stats[0] || {
        total: 0,
        active: 0,
        inactive: 0,
        error: 0,
        working: 0
      };

      res.json({
        success: true,
        data: result
      });
    } catch (error) {
      logger.error('‚ùå Error fetching proxy stats:', error);
      res.status(500).json({
        success: false,
        error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∫—Å–∏'
      });
    }
  }
} 