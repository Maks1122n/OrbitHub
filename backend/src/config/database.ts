import mongoose from 'mongoose';
import { config } from './env';
import logger from '../utils/logger';

export const connectDatabase = async (): Promise<void> => {
  try {
    console.log('üîå MongoDB URI:', config.mongoUri.replace(/:[^:@]+@/, ':***@')); // –°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å –≤ –ª–æ–≥–∞—Ö
    
    let connectionUri = config.mongoUri;
    
    // –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π URI –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –±–µ–∑ SRV
    const tryAlternativeUri = () => {
      if (connectionUri.includes('mongodb+srv://')) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SRV URI –≤ –æ–±—ã—á–Ω—ã–π URI –¥–ª—è Render DNS
        const fallbackUri = connectionUri
          .replace('mongodb+srv://', 'mongodb://')
          .replace('@cluster0.5ggpq.mongodb.net/', '@cluster0.5ggpq.mongodb.net:27017/')
          .replace('?retryWrites=true&w=majority', '?ssl=true&replicaSet=atlas-14abcd-shard-0&authSource=admin&retryWrites=true&w=majority');
        
        console.log('üîÑ Trying fallback URI without SRV...');
        return fallbackUri;
      }
      return connectionUri;
    };
    
    let conn;
    try {
      conn = await mongoose.connect(connectionUri, {
        serverSelectionTimeoutMS: 10000, // 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        socketTimeoutMS: 45000,
        maxPoolSize: 10,
        bufferCommands: false, // –û—Ç–∫–ª—é—á–∏—Ç—å –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      });
      
      console.log('‚úÖ MongoDB connected successfully');
      logger.info('Database connected successfully');
      
    } catch (primaryError) {
      console.log('‚ö†Ô∏è Primary URI failed, trying fallback:', primaryError.message);
      
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URI
      connectionUri = tryAlternativeUri();
      console.log('üîå Fallback URI:', connectionUri.replace(/:[^:@]+@/, ':***@'));
      
      try {
        conn = await mongoose.connect(connectionUri, {
          serverSelectionTimeoutMS: 10000,
          socketTimeoutMS: 45000,
          maxPoolSize: 10,
          bufferCommands: false,
        });
        
        console.log('‚úÖ MongoDB connected via fallback URI');
        logger.info('Database connected via fallback URI');
        
      } catch (fallbackError) {
        // –û–±–∞ URI –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        console.log('‚ùå Database connection failed:', fallbackError.message);
        console.log('‚ö†Ô∏è CONTINUING WITHOUT DATABASE - Service will work in limited mode');
        logger.warn('Database connection failed, continuing without database', {
          primaryError: primaryError.message,
          fallbackError: fallbackError.message
        });
        
        // –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É - –ø–æ–∑–≤–æ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    mongoose.connection.on('connected', () => {
      console.log('üîó MongoDB connection established');
      logger.info('MongoDB connection established');
    });

    mongoose.connection.on('error', (error) => {
      console.error('‚ùå MongoDB connection error:', error);
      logger.error('MongoDB connection error', error);
    });

    mongoose.connection.on('disconnected', () => {
      console.log('üîå MongoDB disconnected');
      logger.warn('MongoDB disconnected');
    });

    // Graceful shutdown
    process.on('SIGINT', async () => {
      try {
        await mongoose.connection.close();
        console.log('üîå MongoDB connection closed through app termination');
        process.exit(0);
      } catch (error) {
        console.error('Error during MongoDB connection close:', error);
        process.exit(1);
      }
    });

  } catch (error) {
    console.error('‚ùå Database initialization failed:', error);
    console.log('‚ö†Ô∏è CONTINUING WITHOUT DATABASE - Service will work in limited mode');
    logger.error('Database initialization failed, continuing without database', error);
    
    // –ù–ï –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É - –ø–æ–∑–≤–æ–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
  }
}; 